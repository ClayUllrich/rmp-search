import {
  sqliteTable,
  AnySQLiteColumn,
  text,
  integer,
  numeric,
  uniqueIndex,
  real,
  index,
} from "drizzle-orm/sqlite-core";
import { sql } from "drizzle-orm";

export const stateZipViewsImportErrors = sqliteTable(
  // 2. But keep the exact DB table name (with spaces, $, etc.) in this string:
  "StateZIP Views$_ImportErrors",
  {
    error: text("Error"),
    field: text("Field"),
    row: integer("Row"),
  }
);
export const tblExecutiveSummaries = sqliteTable("tblExecutiveSummaries", {
  esSeqNum: integer("ESSeqNum"),
  facilityId: integer("FacilityID"),
  summaryText: text("SummaryText"),
});

export const tblExecutiveSummariesChangeHistory = sqliteTable(
  "tblExecutiveSummaries_ChangeHistory",
  {
    esChangeHistoryId: integer("ESChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    summaryText: text("SummaryText"),
    oldSummaryText: text("OldSummaryText"),
    esSeqNum: integer("ESSeqNum"),
    facilityId: integer("FacilityID"),
  }
);

export const tblRmpError = sqliteTable("tblRMPError", {
  facilityId: integer("FacilityID"),
  sequenceNumber: integer("SequenceNumber"),
  errorText: text("ErrorText"),
});

export const tblRmpTrack = sqliteTable("tblRMPTrack", {
  trackId: integer("TrackID"),
  epaFacilityId: text("EPAFacilityID"),
  receiptDate: numeric("ReceiptDate"),
  postmarkDate: numeric("PostmarkDate"),
  facilityName1: text("FacilityName1"),
  facilityName2: text("FacilityName2"),
  facilityStreet1: text("FacilityStreet1"),
  facilityStreet2: text("FacilityStreet2"),
  facilityCity: text("FacilityCity"),
  facilityState: text("FacilityState"),
  facilityZip: text("FacilityZip"),
  facilityZip4: text("FacilityZip4"),
  documentHandle: text("DocumentHandle"),
  comments: text("Comments"),
  documentType: text("DocumentType"),
  rejectionReason: text("RejectionReason"),
  resolutionDate: numeric("ResolutionDate"),
  insertDate: numeric("InsertDate"),
});

export const tblS1Facilities = sqliteTable(
  "tblS1Facilities",
  {
    facilityId: integer("FacilityID"),
    facilityName: text("FacilityName"),
    facilityStr1: text("FacilityStr1"),
    facilityStr2: text("FacilityStr2"),
    facilityCity: text("FacilityCity"),
    facilityState: text("FacilityState"),
    facilityZipCode: text("FacilityZipCode"),
    facility4DigitZipExt: text("Facility4DigitZipExt"),
    facilityCountyFips: text("FacilityCountyFIPS"),
    lepc: text("LEPC"),
    facilityLatDecDegs: text("FacilityLatDecDegs"),
    facilityLongDecDegs: text("FacilityLongDecDegs"),
    validLatLongFlag: integer("ValidLatLongFlag"),
    latLongMethod: text("LatLongMethod"),
    latLongDescription: text("LatLongDescription"),
    facilityUrl: text("FacilityURL"),
    facilityPhoneNumber: text("FacilityPhoneNumber"),
    facilityEmailAddress: text("FacilityEmailAddress"),
    facilityDuns: integer("FacilityDUNS"),
    parentCompanyName: text("ParentCompanyName"),
    company2Name: text("Company2Name"),
    companyDuns: integer("CompanyDUNS"),
    company2Duns: integer("Company2DUNS"),
    operatorName: text("OperatorName"),
    operatorPhone: text("OperatorPhone"),
    operatorStr1: text("OperatorStr1"),
    operatorStr2: text("OperatorStr2"),
    operatorCity: text("OperatorCity"),
    operatorStateFips: text("OperatorStateFIPS"),
    operatorZipCode: text("OperatorZipCode"),
    operatorZipCodeExt: text("OperatorZipCodeExt"),
    rmpContact: text("RMPContact"),
    rmpTitle: text("RMPTitle"),
    emergencyContactName: text("EmergencyContactName"),
    emergencyContactTitle: text("EmergencyContactTitle"),
    emergencyContactPhone: text("EmergencyContactPhone"),
    phone24: text("Phone24"),
    emergencyContactExtPin: text("EmergencyContactExt_PIN"),
    fte: integer("FTE"),
    otherEpaFacilityId: text("OtherEPAFacilityID"),
    epaFacilityId: text("EPAFacilityID"),
    oshaPsm: integer("OSHA_PSM"),
    epcra302: integer("EPCRA_302"),
    caaTitleV: integer("CAA_TitleV"),
    clearAirOpPermitId: text("ClearAirOpPermitID"),
    safetyInspectionDate: numeric("SafetyInspectionDate"),
    safetyInspectionBy: text("SafetyInspectionBy"),
    oshaRanking: integer("OSHARanking"),
    predictiveFilingFlag: integer("PredictiveFilingFlag"),
    submissionType: text("SubmissionType"),
    rmpDescription: text("RMPDescription"),
    noAccidents: integer("NoAccidents"),
    foreignStateProv: text("ForeignStateProv"),
    foreignZipCode: text("ForeignZipCode"),
    foreignCountry: text("ForeignCountry"),
    cbiFlag: integer("CBI_Flag"),
    completionCheckDate: numeric("CompletionCheckDate"),
    errorReportDate: numeric("ErrorReportDate"),
    receiptDate: numeric("ReceiptDate"),
    graphicsIndicator: integer("GraphicsIndicator"),
    attachmentsIndicator: integer("AttachmentsIndicator"),
    certificationReceivedFlag: integer("CertificationReceivedFlag"),
    submissionMethod: text("SubmissionMethod"),
    cbiSubstantiationFlag: integer("CBISubstantiationFlag"),
    electronicWaiverReceivedFlag: integer("ElectronicWaiverReceivedFlag"),
    postmarkDate: numeric("PostmarkDate"),
    rmpCompleteFlag: integer("RMPCompleteFlag"),
    deRegistrationDate: numeric("DeRegistrationDate"),
    deRegistrationEffectiveDate: numeric("DeRegistrationEffectiveDate"),
    anniversaryDate: numeric("AnniversaryDate"),
    cbiUnsanitizedVersionFlag: integer("CBIUnsanitizedVersionFlag"),
    versionNumber: text("VersionNumber"),
    frsLat: real("FRS_Lat"),
    frsLong: real("FRS_Long"),
    frsDescription: text("FRS_Description"),
    frsMethod: text("FRS_Method"),
    horizontalAccMeasure: text("HorizontalAccMeasure"),
    horizontalRefDatumCode: text("HorizontalRefDatumCode"),
    sourceMapScaleNumber: text("SourceMapScaleNumber"),
    emergencyContactEmail: text("EmergencyContactEmail"),
    rmpPreparerName: text("RMPPreparerName"),
    rmpPreparerStreet1: text("RMPPreparerStreet1"),
    rmpPreparerStreet2: text("RMPPreparerStreet2"),
    rmpPreparerCity: text("RMPPreparerCity"),
    rmpPreparerState: text("RMPPreparerState"),
    rmpPreparerZip: text("RMPPreparerZIP"),
    rmpPreparerZip4Ext: text("RMPPreparerZIP4Ext"),
    rmpPreparerTelephone: text("RMPPreparerTelephone"),
    rmpPreparerForeignStateOrProvince: text(
      "RMPPreparerForeignStateOrProvince"
    ),
    rmpPreparerForeignCountry: text("RMPPreparerForeignCountry"),
    rmpPreparerForeignPostalCode: text("RMPPreparerForeignPostalCode"),
    rmpSubmissionReasonCode: text("RMPSubmissionReasonCode"),
    rmpEmail: text("RMPEmail"),
    deregistrationReasonCode: text("DeregistrationReasonCode"),
    deregistrationReasonOtherText: text("DeregistrationReasonOtherText"),
  },
  (table) => [
    uniqueIndex("idx_tblS1Facilities_FacilityID").on(table.facilityId),
  ]
);

export const tblS1FacilitiesChangeHistory = sqliteTable(
  "tblS1Facilities_ChangeHistory",
  {
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionDate: numeric("CDXCorrectionDate"),
    cdxUserId: text("CDXUserID"),
    cdxReasonCode: text("CDXReasonCode"),
    cdxTransactionCode: text("CDXTransactionCode"),
    cdxAuthorizationName: text("CDXAuthorizationName"),
    cdxCorrectionSectionName: text("CDXCorrectionSectionName"),
    rcChangeDate: numeric("RCChangeDate"),
    rcComment: text("RCComment"),
    rcTransactionId: integer("RCTransactionID"),
    facilityId: integer("FacilityID"),
    facilityName: text("FacilityName"),
    oldFacilityName: text("OldFacilityName"),
    facilityStr1: text("FacilityStr1"),
    oldFacilityStr1: text("OldFacilityStr1"),
    facilityStr2: text("FacilityStr2"),
    oldFacilityStr2: text("OldFacilityStr2"),
    facilityCity: text("FacilityCity"),
    oldFacilityCity: text("OldFacilityCity"),
    facilityState: text("FacilityState"),
    oldFacilityState: text("OldFacilityState"),
    facilityZipCode: text("FacilityZipCode"),
    oldFacilityZipCode: text("OldFacilityZipCode"),
    facility4DigitZipExt: text("Facility4DigitZipExt"),
    oldFacility4DigitZipExt: text("OldFacility4DigitZipExt"),
    facilityCountyFips: text("FacilityCountyFIPS"),
    oldFacilityCountyFips: text("OldFacilityCountyFIPS"),
    lepc: text("LEPC"),
    oldLepc: text("OldLEPC"),
    facilityLatDecDegs: text("FacilityLatDecDegs"),
    oldFacilityLatDecDegs: text("OldFacilityLatDecDegs"),
    facilityLongDecDegs: text("FacilityLongDecDegs"),
    oldFacilityLongDecDegs: text("OldFacilityLongDecDegs"),
    latLongMethod: text("LatLongMethod"),
    oldLatLongMethod: text("OldLatLongMethod"),
    latLongDescription: text("LatLongDescription"),
    oldLatLongDescription: text("OldLatLongDescription"),
    facilityUrl: text("FacilityURL"),
    oldFacilityUrl: text("OldFacilityURL"),
    facilityPhoneNumber: text("FacilityPhoneNumber"),
    oldFacilityPhoneNumber: text("OldFacilityPhoneNumber"),
    facilityEmailAddress: text("FacilityEmailAddress"),
    oldFacilityEmailAddress: text("OldFacilityEmailAddress"),
    facilityDuns: integer("FacilityDUNS"),
    oldFacilityDuns: integer("OldFacilityDUNS"),
    parentCompanyName: text("ParentCompanyName"),
    oldParentCompanyName: text("OldParentCompanyName"),
    company2Name: text("Company2Name"),
    oldCompany2Name: text("OldCompany2Name"),
    companyDuns: integer("CompanyDUNS"),
    oldCompanyDuns: integer("OldCompanyDUNS"),
    company2Duns: integer("Company2DUNS"),
    oldCompany2Duns: integer("OldCompany2DUNS"),
    operatorName: text("OperatorName"),
    oldOperatorName: text("OldOperatorName"),
    operatorPhone: text("OperatorPhone"),
    oldOperatorPhone: text("OldOperatorPhone"),
    operatorStr1: text("OperatorStr1"),
    oldOperatorStr1: text("OldOperatorStr1"),
    operatorStr2: text("OperatorStr2"),
    oldOperatorStr2: text("OldOperatorStr2"),
    operatorCity: text("OperatorCity"),
    oldOperatorCity: text("OldOperatorCity"),
    operatorState: text("OperatorState"),
    oldOperatorState: text("OldOperatorState"),
    operatorZipCode: text("OperatorZipCode"),
    oldOperatorZipCode: text("OldOperatorZipCode"),
    operatorZipCodeExt: text("OperatorZipCodeExt"),
    oldOperatorZipCodeExt: text("OldOperatorZipCodeExt"),
    rmpContact: text("RMPContact"),
    oldRmpContact: text("OldRMPContact"),
    rmpTitle: text("RMPTitle"),
    oldRmpTitle: text("OldRMPTitle"),
    emergencyContactName: text("EmergencyContactName"),
    oldEmergencyContactName: text("OldEmergencyContactName"),
    emergencyContactTitle: text("EmergencyContactTitle"),
    oldEmergencyContactTitle: text("OldEmergencyContactTitle"),
    emergencyContactPhone: text("EmergencyContactPhone"),
    oldEmergencyContactPhone: text("OldEmergencyContactPhone"),
    phone24: text("Phone24"),
    oldPhone24: text("OldPhone24"),
    emergencyContactExtPin: text("EmergencyContactExt_PIN"),
    oldEmergencyContactExtPin: text("OldEmergencyContactExt_PIN"),
    fte: integer("FTE"),
    oldFte: integer("OldFTE"),
    otherEpaFacilityId: text("OtherEPAFacilityID"),
    oldOtherEpaFacilityId: text("OldOtherEPAFacilityID"),
    epaFacilityId: text("EPAFacilityID"),
    oldEpaFacilityId: text("OldEPAFacilityID"),
    oshaPsm: integer("OSHA_PSM"),
    oldOshaPsm: integer("OldOSHA_PSM"),
    epcra302: integer("EPCRA_302"),
    oldEpcra302: integer("OldEPCRA_302"),
    caaTitleV: integer("CAA_TitleV"),
    oldCaaTitleV: integer("OldCAA_TitleV"),
    clearAirOpPermitId: text("ClearAirOpPermitID"),
    oldClearAirOpPermitId: text("OldClearAirOpPermitID"),
    safetyInspectionDate: numeric("SafetyInspectionDate"),
    oldSafetyInspectionDate: numeric("OldSafetyInspectionDate"),
    safetyInspectionBy: text("SafetyInspectionBy"),
    oldSafetyInspectionBy: text("OldSafetyInspectionBy"),
    oshaRanking: integer("OSHARanking"),
    oldOshaRanking: integer("OldOSHARanking"),
    submissionType: text("SubmissionType"),
    oldSubmissionType: text("OldSubmissionType"),
    noAccidents: integer("NoAccidents"),
    oldNoAccidents: integer("OldNoAccidents"),
    foreignStateProv: text("ForeignStateProv"),
    oldForeignStateProv: text("OldForeignStateProv"),
    foreignZipCode: text("ForeignZipCode"),
    oldForeignZipCode: text("OldForeignZipCode"),
    foreignCountry: text("ForeignCountry"),
    oldForeignCountry: text("OldForeignCountry"),
    completionCheckDate: numeric("CompletionCheckDate"),
    oldCompletionCheckDate: numeric("OldCompletionCheckDate"),
    errorReportDate: numeric("ErrorReportDate"),
    oldErrorReportDate: numeric("OldErrorReportDate"),
    receiptDate: numeric("ReceiptDate"),
    oldReceiptDate: numeric("OldReceiptDate"),
    postmarkDate: numeric("PostmarkDate"),
    oldPostmarkDate: numeric("OldPostmarkDate"),
    rmpCompleteFlag: integer("RMPCompleteFlag"),
    oldRmpCompleteFlag: integer("OldRMPCompleteFlag"),
    deRegistrationDate: numeric("DeRegistrationDate"),
    oldDeRegistrationDate: numeric("OldDeRegistrationDate"),
    deRegistrationEffectiveDate: numeric("DeRegistrationEffectiveDate"),
    oldDeRegistrationEffectiveDate: numeric("OldDeRegistrationEffectiveDate"),
    anniversaryDate: numeric("AnniversaryDate"),
    oldAnniversaryDate: numeric("OldAnniversaryDate"),
    horizontalAccMeasure: text("HorizontalAccMeasure"),
    oldHorizontalAccMeasure: text("OldHorizontalAccMeasure"),
    horizontalRefDatumCode: text("HorizontalRefDatumCode"),
    oldHorizontalRefDatumCode: text("OldHorizontalRefDatumCode"),
    sourceMapScaleNumber: text("SourceMapScaleNumber"),
    oldSourceMapScaleNumber: text("OldSourceMapScaleNumber"),
    emergencyContactEmail: text("EmergencyContactEmail"),
    oldEmergencyContactEmail: text("OldEmergencyContactEmail"),
    rmpPreparerName: text("RMPPreparerName"),
    oldRmpPreparerName: text("OldRMPPreparerName"),
    rmpPreparerStreet1: text("RMPPreparerStreet1"),
    oldRmpPreparerStreet1: text("OldRMPPreparerStreet1"),
    rmpPreparerStreet2: text("RMPPreparerStreet2"),
    oldRmpPreparerStreet2: text("OldRMPPreparerStreet2"),
    rmpPreparerCity: text("RMPPreparerCity"),
    oldRmpPreparerCity: text("OldRMPPreparerCity"),
    rmpPreparerState: text("RMPPreparerState"),
    oldRmpPreparerState: text("OldRMPPreparerState"),
    rmpPreparerZip: text("RMPPreparerZIP"),
    oldRmpPreparerZip: text("OldRMPPreparerZIP"),
    rmpPreparerZip4Ext: text("RMPPreparerZIP4Ext"),
    oldRmpPreparerZip4Ext: text("OldRMPPreparerZIP4Ext"),
    rmpPreparerTelephone: text("RMPPreparerTelephone"),
    oldRmpPreparerTelephone: text("OldRMPPreparerTelephone"),
    rmpPreparerForeignStateOrProvince: text(
      "RMPPreparerForeignStateOrProvince"
    ),
    oldRmpPreparerForeignStateOrProvince: text(
      "OldRMPPreparerForeignStateOrProvince"
    ),
    rmpPreparerForeignCountry: text("RMPPreparerForeignCountry"),
    oldRmpPreparerForeignCountry: text("OldRMPPreparerForeignCountry"),
    rmpPreparerForeignPostalCode: text("RMPPreparerForeignPostalCode"),
    oldRmpPreparerForeignPostalCode: text("OldRMPPreparerForeignPostalCode"),
    rmpSubmissionReasonCode: text("RMPSubmissionReasonCode"),
    oldRmpSubmissionReasonCode: text("OldRMPSubmissionReasonCode"),
    rmpEmail: text("RMPEmail"),
    oldRmpEmail: text("OldRMPEmail"),
    deregistrationReasonCode: text("DeregistrationReasonCode"),
    oldDeregistrationReasonCode: text("OldDeregistrationReasonCode"),
    deregistrationReasonOtherText: text("DeregistrationReasonOtherText"),
    oldDeregistrationReasonOtherText: text("OldDeregistrationReasonOtherText"),
  }
);

export const tblS1FlammableMixtureChemicals = sqliteTable(
  "tblS1FlammableMixtureChemicals",
  {
    flamMixChemId: integer("FlamMixChemID"),
    processChemicalId: integer("ProcessChemicalID"),
    chemicalId: integer("ChemicalID"),
  },
  (table) => [
    index("idx_tblS1FlammableMixtureChemicals_ProcessChemicalID").on(
      table.processChemicalId
    ),
  ]
);

export const tblS1Process_Naics = sqliteTable(
  "tblS1Process_NAICS",
  {
    processNaicsId: integer("Process_NAICS_ID"),
    processId: integer("ProcessID"),
    naicsCode: text("NAICSCode"),
  },
  (table) => [index("idx_tblS1Process_NAICS_ProcessID").on(table.processId)]
);

export const tblS1ProcessNaicsChangeHistory = sqliteTable(
  "tblS1Process_NAICS_ChangeHistory",
  {
    processNaicsIdChangeHistoryId: integer("Process_NAICS_IDChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    processNaicsId: integer("Process_NAICS_ID"),
    processId: integer("ProcessID"),
    naicsCode: text("NAICSCode"),
  }
);

export const tblS1ProcessChemicals = sqliteTable(
  "tblS1ProcessChemicals",
  {
    processChemicalId: integer("ProcessChemicalID"),
    processId: integer("ProcessID"),
    chemicalId: integer("ChemicalID"),
    quantity: real("Quantity"),
    cbiFlag: integer("CBI_Flag"),
  },
  (table) => [index("idx_tblS1ProcessChemicals_ProcessID").on(table.processId)]
);

export const tblS1ProcessChemicalsChangeHistory = sqliteTable(
  "tblS1ProcessChemicals_ChangeHistory",
  {
    processChemicalIdChangeHistoryId: integer(
      "ProcessChemicalIDChangeHistoryID"
    ),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    processChemicalId: integer("ProcessChemicalID"),
    processId: integer("ProcessID"),
    chemicalId: integer("ChemicalID"),
    quantity: real("Quantity"),
    oldQuantity: real("OldQuantity"),
  }
);

export const tblS1Processes = sqliteTable(
  "tblS1Processes",
  {
    processId: integer("ProcessID"),
    altId: text("AltID"),
    facilityId: integer("FacilityID"),
    programLevel: integer("ProgramLevel"),
    cbiFlag: integer("CBI_Flag"),
  },
  (table) => [index("idx_tblS1Processes_FacilityID").on(table.facilityId)]
);

export const tblS1ProcessesChangeHistory = sqliteTable(
  "tblS1Processes_ChangeHistory",
  {
    processChangeHistoryId: integer("ProcessChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    processId: integer("ProcessID"),
    altId: text("AltID"),
    facilityId: integer("FacilityID"),
    programLevel: integer("ProgramLevel"),
    oldAltId: text("OldAltID"),
  }
);

export const tblS2ToxicsWorstCase = sqliteTable("tblS2ToxicsWorstCase", {
  toxicId: integer("ToxicID"),
  processChemicalId: integer("ProcessChemicalID"),
  percentWeight: real("PercentWeight"),
  physicalState: text("PhysicalState"),
  analyticalBasis: text("AnalyticalBasis"),
  scenario: text("Scenario"),
  quantityReleased: real("QuantityReleased"),
  releaseDuration: real("ReleaseDuration"),
  releaseRate: real("ReleaseRate"),
  windSpeed: real("WindSpeed"),
  stabilityClass: text("StabilityClass"),
  topography: text("Topography"),
  distance2Endpoint: real("Distance2Endpoint"),
  residentialPopulation: integer("ResidentialPopulation"),
  prSchools: integer("PR_Schools"),
  prResidences: integer("PR_Residences"),
  prHospitals: integer("PR_Hospitals"),
  prPrisons: integer("PR_Prisons"),
  prPublicRecreation: integer("PR_PublicRecreation"),
  prCommInd: integer("PR_Comm_Ind"),
  prOtherType: text("PR_OtherType"),
  erNatlStateParks: integer("ER_NatlStateParks"),
  erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
  erFedWilderness: integer("ER_FedWilderness"),
  erOtherType: text("ER_OtherType"),
  pmDikes: integer("PM_Dikes"),
  pmEnclosures: integer("PM_Enclosures"),
  pmBerms: integer("PM_Berms"),
  pmDrains: integer("PM_Drains"),
  pmSumps: integer("PM_Sumps"),
  pmOtherType: text("PM_OtherType"),
  cbiFlag: integer("CBI_Flag"),
});

export const tblS2ToxicsWorstCaseChangeHistory = sqliteTable(
  "tblS2ToxicsWorstCase_ChangeHistory",
  {
    toxicChangeHistoryId: integer("ToxicChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    toxicId: integer("ToxicID"),
    processChemicalId: integer("ProcessChemicalID"),
    percentWeight: real("PercentWeight"),
    oldPercentWeight: real("OldPercentWeight"),
    physicalState: text("PhysicalState"),
    oldPhysicalState: text("OldPhysicalState"),
    analyticalBasis: text("AnalyticalBasis"),
    oldAnalyticalBasis: text("OldAnalyticalBasis"),
    scenario: text("Scenario"),
    oldScenario: text("OldScenario"),
    quantityReleased: real("QuantityReleased"),
    oldQuantityReleased: real("OldQuantityReleased"),
    releaseDuration: real("ReleaseDuration"),
    oldReleaseDuration: real("OldReleaseDuration"),
    releaseRate: real("ReleaseRate"),
    oldReleaseRate: real("OldReleaseRate"),
    windSpeed: real("WindSpeed"),
    oldWindSpeed: real("OldWindSpeed"),
    stabilityClass: text("StabilityClass"),
    oldStabilityClass: text("OldStabilityClass"),
    topography: text("Topography"),
    oldTopography: text("OldTopography"),
    distance2Endpoint: real("Distance2Endpoint"),
    oldDistance2Endpoint: real("OldDistance2Endpoint"),
    residentialPopulation: integer("ResidentialPopulation"),
    oldResidentialPopulation: integer("OldResidentialPopulation"),
    prSchools: integer("PR_Schools"),
    oldPrSchools: integer("OldPR_Schools"),
    prResidences: integer("PR_Residences"),
    oldPrResidences: integer("OldPR_Residences"),
    prHospitals: integer("PR_Hospitals"),
    oldPrHospitals: integer("OldPR_Hospitals"),
    prPrisons: integer("PR_Prisons"),
    oldPrPrisons: integer("OldPR_Prisons"),
    prPublicRecreation: integer("PR_PublicRecreation"),
    oldPrPublicRecreation: integer("OldPR_PublicRecreation"),
    prCommInd: integer("PR_Comm_Ind"),
    oldPrCommInd: integer("OldPR_Comm_Ind"),
    prOtherType: text("PR_OtherType"),
    oldPrOtherType: text("OldPR_OtherType"),
    erNatlStateParks: integer("ER_NatlStateParks"),
    oldErNatlStateParks: integer("OldER_NatlStateParks"),
    erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
    oldErWildlifeSanctuary: integer("OldER_WildlifeSanctuary"),
    erFedWilderness: integer("ER_FedWilderness"),
    oldErFedWilderness: integer("OldER_FedWilderness"),
    erOtherType: text("ER_OtherType"),
    oldErOtherType: text("OldER_OtherType"),
    pmDikes: integer("PM_Dikes"),
    oldPmDikes: integer("OldPM_Dikes"),
    pmEnclosures: integer("PM_Enclosures"),
    oldPmEnclosures: integer("OldPM_Enclosures"),
    pmBerms: integer("PM_Berms"),
    oldPmBerms: integer("OldPM_Berms"),
    pmDrains: integer("PM_Drains"),
    oldPmDrains: integer("OldPM_Drains"),
    pmSumps: integer("PM_Sumps"),
    oldPmSumps: integer("OldPM_Sumps"),
    pmOtherType: text("PM_OtherType"),
    oldPmOtherType: text("OldPM_OtherType"),
  }
);

export const tblS3ToxicsAltReleases = sqliteTable("tblS3ToxicsAltReleases", {
  toxicId: integer("ToxicID"),
  processChemicalId: integer("ProcessChemicalID"),
  percentWeight: real("PercentWeight"),
  physicalState: text("PhysicalState"),
  analyticalBasis: text("AnalyticalBasis"),
  scenario: text("Scenario"),
  quantityReleased: real("QuantityReleased"),
  releaseDuration: real("ReleaseDuration"),
  releaseRate: real("ReleaseRate"),
  windSpeed: real("WindSpeed"),
  stabilityClass: text("StabilityClass"),
  topography: text("Topography"),
  distance2Endpoint: real("Distance2Endpoint"),
  residentialPopulation: integer("ResidentialPopulation"),
  prSchools: integer("PR_Schools"),
  prResidences: integer("PR_Residences"),
  prHospitals: integer("PR_Hospitals"),
  prPrisons: integer("PR_Prisons"),
  prPublicRecreation: integer("PR_PublicRecreation"),
  prCommInd: integer("PR_Comm_Ind"),
  prOtherType: text("PR_OtherType"),
  erNatlStateParks: integer("ER_NatlStateParks"),
  erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
  erFedWilderness: integer("ER_FedWilderness"),
  erOtherType: text("ER_OtherType"),
  pmDikes: integer("PM_Dikes"),
  pmEnclosures: integer("PM_Enclosures"),
  pmBerms: integer("PM_Berms"),
  pmDrains: integer("PM_Drains"),
  pmSumps: integer("PM_Sumps"),
  pmOtherType: text("PM_OtherType"),
  amSprinklerSystems: integer("AM_SprinklerSystems"),
  amDelugeSystems: integer("AM_DelugeSystems"),
  amWaterCurtain: integer("AM_WaterCurtain"),
  amNeutralization: integer("AM_Neutralization"),
  amExcessFlowValve: integer("AM_ExcessFlowValve"),
  amFlares: integer("AM_Flares"),
  amScrubbers: integer("AM_Scrubbers"),
  amEmergencyShutdown: integer("AM_EmergencyShutdown"),
  amOtherType: text("AM_OtherType"),
  cbiFlag: integer("CBI_Flag"),
});

export const tblS3ToxicsAltReleasesChangeHistory = sqliteTable(
  "tblS3ToxicsAltReleases_ChangeHistory",
  {
    toxicAlterChangeHistoryId: integer("ToxicAlterChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    toxicId: integer("ToxicID"),
    processChemicalId: integer("ProcessChemicalID"),
    percentWeight: real("PercentWeight"),
    oldPercentWeight: real("OldPercentWeight"),
    physicalState: text("PhysicalState"),
    oldPhysicalState: text("OldPhysicalState"),
    analyticalBasis: text("AnalyticalBasis"),
    oldAnalyticalBasis: text("OldAnalyticalBasis"),
    scenario: text("Scenario"),
    oldScenario: text("OldScenario"),
    quantityReleased: real("QuantityReleased"),
    oldQuantityReleased: real("OldQuantityReleased"),
    releaseDuration: real("ReleaseDuration"),
    oldReleaseDuration: real("OldReleaseDuration"),
    releaseRate: real("ReleaseRate"),
    oldReleaseRate: real("OldReleaseRate"),
    windSpeed: real("WindSpeed"),
    oldWindSpeed: real("OldWindSpeed"),
    stabilityClass: text("StabilityClass"),
    oldStabilityClass: text("OldStabilityClass"),
    topography: text("Topography"),
    oldTopography: text("OldTopography"),
    distance2Endpoint: real("Distance2Endpoint"),
    oldDistance2Endpoint: real("OldDistance2Endpoint"),
    residentialPopulation: integer("ResidentialPopulation"),
    oldResidentialPopulation: integer("OldResidentialPopulation"),
    prSchools: integer("PR_Schools"),
    oldPrSchools: integer("OldPR_Schools"),
    prResidences: integer("PR_Residences"),
    oldPrResidences: integer("OldPR_Residences"),
    prHospitals: integer("PR_Hospitals"),
    oldPrHospitals: integer("OldPR_Hospitals"),
    prPrisons: integer("PR_Prisons"),
    oldPrPrisons: integer("OldPR_Prisons"),
    prPublicRecreation: integer("PR_PublicRecreation"),
    oldPrPublicRecreation: integer("OldPR_PublicRecreation"),
    prCommInd: integer("PR_Comm_Ind"),
    oldPrCommInd: integer("OldPR_Comm_Ind"),
    prOtherType: text("PR_OtherType"),
    oldPrOtherType: text("OldPR_OtherType"),
    erNatlStateParks: integer("ER_NatlStateParks"),
    oldErNatlStateParks: integer("OldER_NatlStateParks"),
    erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
    oldErWildlifeSanctuary: integer("OldER_WildlifeSanctuary"),
    erFedWilderness: integer("ER_FedWilderness"),
    oldErFedWilderness: integer("OldER_FedWilderness"),
    erOtherType: text("ER_OtherType"),
    oldErOtherType: text("OldER_OtherType"),
    pmDikes: integer("PM_Dikes"),
    oldPmDikes: integer("OldPM_Dikes"),
    pmEnclosures: integer("PM_Enclosures"),
    oldPmEnclosures: integer("OldPM_Enclosures"),
    pmBerms: integer("PM_Berms"),
    oldPmBerms: integer("OldPM_Berms"),
    pmDrains: integer("PM_Drains"),
    oldPmDrains: integer("OldPM_Drains"),
    pmSumps: integer("PM_Sumps"),
    oldPmSumps: integer("OldPM_Sumps"),
    pmOtherType: text("PM_OtherType"),
    oldPmOtherType: text("OldPM_OtherType"),
    amSprinklerSystems: integer("AM_SprinklerSystems"),
    oldAmSprinklerSystems: integer("OldAM_SprinklerSystems"),
    amDelugeSystems: integer("AM_DelugeSystems"),
    oldAmDelugeSystems: integer("OldAM_DelugeSystems"),
    amWaterCurtain: integer("AM_WaterCurtain"),
    oldAmWaterCurtain: integer("OldAM_WaterCurtain"),
    amNeutralization: integer("AM_Neutralization"),
    oldAmNeutralization: integer("OldAM_Neutralization"),
    amExcessFlowValve: integer("AM_ExcessFlowValve"),
    oldAmExcessFlowValve: integer("OldAM_ExcessFlowValve"),
    amFlares: integer("AM_Flares"),
    oldAmFlares: integer("OldAM_Flares"),
    amScrubbers: integer("AM_Scrubbers"),
    oldAmScrubbers: integer("OldAM_Scrubbers"),
    amEmergencyShutdown: integer("AM_EmergencyShutdown"),
    oldAmEmergencyShutdown: integer("OldAM_EmergencyShutdown"),
    amOtherType: text("AM_OtherType"),
    oldAmOtherType: text("OldAM_OtherType"),
  }
);

export const tblS4FlammablesWorstCaseChangeHistory = sqliteTable(
  "tblS4FlammablesWorstCase_ChangeHistory",
  {
    flammableChangeHistoryId: integer("FlammableChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    flammableId: integer("FlammableID"),
    processChemicalId: integer("ProcessChemicalID"),
    analyticalBasis: text("AnalyticalBasis"),
    oldAnalyticalBasis: text("OldAnalyticalBasis"),
    quantityReleased: real("QuantityReleased"),
    oldQuantityReleased: real("OldQuantityReleased"),
    distance2Endpoint: real("Distance2Endpoint"),
    oldDistance2Endpoint: real("OldDistance2Endpoint"),
    residentialPopulation: integer("ResidentialPopulation"),
    oldResidentialPopulation: integer("OldResidentialPopulation"),
    prSchools: integer("PR_Schools"),
    oldPrSchools: integer("OldPR_Schools"),
    prResidences: integer("PR_Residences"),
    oldPrResidences: integer("OldPR_Residences"),
    prHospitals: integer("PR_Hospitals"),
    oldPrHospitals: integer("OldPR_Hospitals"),
    prPrisons: integer("PR_Prisons"),
    oldPrPrisons: integer("OldPR_Prisons"),
    prPublicRecreation: integer("PR_PublicRecreation"),
    oldPrPublicRecreation: integer("OldPR_PublicRecreation"),
    prCommInd: integer("PR_Comm_Ind"),
    oldPrCommInd: integer("OldPR_Comm_Ind"),
    prOtherType: text("PR_OtherType"),
    oldPrOtherType: text("OldPR_OtherType"),
    erNatlStateParks: integer("ER_NatlStateParks"),
    oldErNatlStateParks: integer("OldER_NatlStateParks"),
    erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
    oldErWildlifeSanctuary: integer("OldER_WildlifeSanctuary"),
    erFedWilderness: integer("ER_FedWilderness"),
    oldErFedWilderness: integer("OldER_FedWilderness"),
    erOtherType: text("ER_OtherType"),
    oldErOtherType: text("OldER_OtherType"),
    pmBlastWalls: integer("PM_BlastWalls"),
    oldPmBlastWalls: integer("OldPM_BlastWalls"),
    pmOtherType: text("PM_OtherType"),
    oldPmOtherType: text("OldPM_OtherType"),
  }
);

export const tblS5FlammablesAltReleases = sqliteTable(
  "tblS5FlammablesAltReleases",
  {
    flammableId: integer("FlammableID"),
    processChemicalId: integer("ProcessChemicalID"),
    analyticalBasis: text("AnalyticalBasis"),
    scenario: text("Scenario"),
    quantityReleased: real("QuantityReleased"),
    endpointUsed: text("EndpointUsed"),
    lflValue: real("LFL_Value"),
    distance2Endpoint: real("Distance2Endpoint"),
    residentialPopulation: integer("ResidentialPopulation"),
    prSchools: integer("PR_Schools"),
    prResidences: integer("PR_Residences"),
    prHospitals: integer("PR_Hospitals"),
    prPrisons: integer("PR_Prisons"),
    prPublicRecreation: integer("PR_PublicRecreation"),
    prCommInd: integer("PR_Comm_Ind"),
    prOtherType: text("PR_OtherType"),
    erNatlStateParks: integer("ER_NatlStateParks"),
    erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
    erFedWilderness: integer("ER_FedWilderness"),
    erOtherType: text("ER_OtherType"),
    pmDikes: integer("PM_Dikes"),
    pmFireWalls: integer("PM_FireWalls"),
    pmBlastWalls: integer("PM_BlastWalls"),
    pmEnclosures: integer("PM_Enclosures"),
    pmOtherType: text("PM_OtherType"),
    amSprinklerSystems: integer("AM_SprinklerSystems"),
    amDelugeSystems: integer("AM_DelugeSystems"),
    amWaterCurtain: integer("AM_WaterCurtain"),
    amExcessFlowValve: integer("AM_ExcessFlowValve"),
    amOtherType: text("AM_OtherType"),
    cbiFlag: integer("CBI_Flag"),
  }
);

export const tblS6AccidentChemicals = sqliteTable("tblS6AccidentChemicals", {
  accidentChemicalId: integer("AccidentChemicalID"),
  accidentHistoryId: integer("AccidentHistoryID"),
  chemicalId: integer("ChemicalID"),
  quantityReleased: real("QuantityReleased"),
  percentWeight: real("PercentWeight"),
});

export const tblS6AccidentChemicalsChangeHistory = sqliteTable(
  "tblS6AccidentChemicals_ChangeHistory",
  {
    accidentChemicalChangeHistoryId: integer("AccidentChemicalChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    accidentHistoryId: integer("AccidentHistoryID"),
    accidentChangeHistoryId: integer("AccidentChangeHistoryID"),
    accidentChemicalId: integer("AccidentChemicalID"),
    chemicalId: integer("ChemicalID"),
    quantityReleased: real("QuantityReleased"),
    oldQuantityReleased: real("OldQuantityReleased"),
    percentWeight: real("PercentWeight"),
    oldPercentWeight: real("OldPercentWeight"),
  }
);

export const tblS6AccidentHistory = sqliteTable("tblS6AccidentHistory", {
  accidentHistoryId: integer("AccidentHistoryID"),
  facilityId: integer("FacilityID"),
  accidentDate: numeric("AccidentDate"),
  accidentTime: text("AccidentTime"),
  naicsCode: text("NAICSCode"),
  accidentReleaseDuration: text("AccidentReleaseDuration"),
  reGas: integer("RE_Gas"),
  reSpill: integer("RE_Spill"),
  reFire: integer("RE_Fire"),
  reExplosion: integer("RE_Explosion"),
  reReactiveIncident: integer("RE_ReactiveIncident"),
  rsStorageVessel: integer("RS_StorageVessel"),
  rsPiping: integer("RS_Piping"),
  rsProcessVessel: integer("RS_ProcessVessel"),
  rsTransferHose: integer("RS_TransferHose"),
  rsValve: integer("RS_Valve"),
  rsPump: integer("RS_Pump"),
  rsJoint: integer("RS_Joint"),
  otherReleaseSource: text("OtherReleaseSource"),
  windSpeed: real("WindSpeed"),
  windSpeedUnitCode: text("WindSpeedUnitCode"),
  windDirection: text("WindDirection"),
  temperature: real("Temperature"),
  stabilityClass: text("StabilityClass"),
  precipitation: integer("Precipitation"),
  weatherUnknown: integer("WeatherUnknown"),
  deathsWorkers: integer("DeathsWorkers"),
  deathsPublicResponders: integer("DeathsPublicResponders"),
  deathsPublic: integer("DeathsPublic"),
  injuriesWorkers: integer("InjuriesWorkers"),
  injuriesPublicResponders: integer("InjuriesPublicResponders"),
  injuriesPublic: integer("InjuriesPublic"),
  onsitePropertyDamage: real("OnsitePropertyDamage"),
  offsiteDeaths: integer("OffsiteDeaths"),
  hospitalization: real("Hospitalization"),
  medicalTreatment: real("MedicalTreatment"),
  evacuated: real("Evacuated"),
  shelteredInPlace: real("ShelteredInPlace"),
  offsitePropertyDamage: real("OffsitePropertyDamage"),
  edKills: integer("ED_Kills"),
  edMinorDefoliation: integer("ED_MinorDefoliation"),
  edWaterContamination: integer("ED_WaterContamination"),
  edSoilContamination: integer("ED_SoilContamination"),
  edOther: text("ED_Other"),
  initiatingEvent: text("InitiatingEvent"),
  cfEquipmentFailure: integer("CF_EquipmentFailure"),
  cfHumanError: integer("CF_HumanError"),
  cfImproperProcedure: integer("CF_ImproperProcedure"),
  cfOverpressurization: integer("CF_Overpressurization"),
  cfUpsetCondition: integer("CF_UpsetCondition"),
  cfBypassCondition: integer("CF_BypassCondition"),
  cfMaintenance: integer("CF_Maintenance"),
  cfProcessDesignFailure: integer("CF_ProcessDesignFailure"),
  cfUnsuitableEquipment: integer("CF_UnsuitableEquipment"),
  cfUnusualWeather: integer("CF_UnusualWeather"),
  cfManagementError: integer("CF_ManagementError"),
  cfOther: text("CF_Other"),
  offsiteRespondersNotify: text("OffsiteRespondersNotify"),
  ciImprovedEquipment: integer("CI_ImprovedEquipment"),
  ciRevisedMaintenance: integer("CI_RevisedMaintenance"),
  ciRevisedTraining: integer("CI_RevisedTraining"),
  ciRevisedOpProcedures: integer("CI_RevisedOpProcedures"),
  ciNewProcessControls: integer("CI_NewProcessControls"),
  ciNewMitigationSystems: integer("CI_NewMitigationSystems"),
  ciRevisedErPlan: integer("CI_RevisedERPlan"),
  ciChangedProcess: integer("CI_ChangedProcess"),
  ciReducedInventory: integer("CI_ReducedInventory"),
  ciNone: integer("CI_None"),
  ciOtherType: text("CI_OtherType"),
  cbiFlag: integer("CBI_Flag"),
  publicMeeting: integer("PublicMeeting"),
  publicMeetingDate: numeric("PublicMeetingDate"),
});

export const tblS6AccidentHistoryChangeHistory = sqliteTable(
  "tblS6AccidentHistory_ChangeHistory",
  {
    accidentChangeHistoryId: integer("AccidentChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    accidentHistoryId: integer("AccidentHistoryID"),
    facilityId: integer("FacilityID"),
    accidentDate: numeric("AccidentDate"),
    oldAccidentDate: numeric("OldAccidentDate"),
    accidentTime: text("AccidentTime"),
    oldAccidentTime: text("OldAccidentTime"),
    naicsCode: text("NAICSCode"),
    oldNaicsCode: text("OldNAICSCode"),
    accidentReleaseDuration: text("AccidentReleaseDuration"),
    oldAccidentReleaseDuration: text("OldAccidentReleaseDuration"),
    reGas: integer("RE_Gas"),
    oldReGas: integer("OldRE_Gas"),
    reSpill: integer("RE_Spill"),
    oldReSpill: integer("OldRE_Spill"),
    reFire: integer("RE_Fire"),
    oldReFire: integer("OldRE_Fire"),
    reExplosion: integer("RE_Explosion"),
    oldReExplosion: integer("OldRE_Explosion"),
    reReactiveIncident: integer("RE_ReactiveIncident"),
    oldReReactiveIncident: integer("OldRE_ReactiveIncident"),
    rsStorageVessel: integer("RS_StorageVessel"),
    oldRsStorageVessel: integer("OldRS_StorageVessel"),
    rsPiping: integer("RS_Piping"),
    oldRsPiping: integer("OldRS_Piping"),
    rsProcessVessel: integer("RS_ProcessVessel"),
    oldRsProcessVessel: integer("OldRS_ProcessVessel"),
    rsTransferHose: integer("RS_TransferHose"),
    oldRsTransferHose: integer("OldRS_TransferHose"),
    rsValve: integer("RS_Valve"),
    oldRsValve: integer("OldRS_Valve"),
    rsPump: integer("RS_Pump"),
    oldRsPump: integer("OldRS_Pump"),
    rsJoint: integer("RS_Joint"),
    oldRsJoint: integer("OldRS_Joint"),
    otherReleaseSource: text("OtherReleaseSource"),
    oldOtherReleaseSource: text("OldOtherReleaseSource"),
    windSpeed: real("WindSpeed"),
    oldWindSpeed: real("OldWindSpeed"),
    windSpeedUnitCode: text("WindSpeedUnitCode"),
    oldWindSpeedUnitCode: text("OldWindSpeedUnitCode"),
    windDirection: text("WindDirection"),
    oldWindDirection: text("OldWindDirection"),
    temperature: real("Temperature"),
    oldTemperature: real("OldTemperature"),
    stabilityClass: text("StabilityClass"),
    oldStabilityClass: text("OldStabilityClass"),
    precipitation: integer("Precipitation"),
    oldPrecipitation: integer("OldPrecipitation"),
    weatherUnknown: integer("WeatherUnknown"),
    oldWeatherUnknown: integer("OldWeatherUnknown"),
    deathsWorkers: integer("DeathsWorkers"),
    oldDeathsWorkers: integer("OldDeathsWorkers"),
    deathsPublicResponders: integer("DeathsPublicResponders"),
    oldDeathsPublicResponders: integer("OldDeathsPublicResponders"),
    deathsPublic: integer("DeathsPublic"),
    oldDeathsPublic: integer("OldDeathsPublic"),
    injuriesWorkers: integer("InjuriesWorkers"),
    oldInjuriesWorkers: integer("OldInjuriesWorkers"),
    injuriesPublicResponders: integer("InjuriesPublicResponders"),
    oldInjuriesPublicResponders: integer("OldInjuriesPublicResponders"),
    injuriesPublic: integer("InjuriesPublic"),
    oldInjuriesPublic: integer("OldInjuriesPublic"),
    onsitePropertyDamage: real("OnsitePropertyDamage"),
    oldOnsitePropertyDamage: real("OldOnsitePropertyDamage"),
    offsiteDeaths: integer("OffsiteDeaths"),
    oldOffsiteDeaths: integer("OldOffsiteDeaths"),
    hospitalization: real("Hospitalization"),
    oldHospitalization: real("OldHospitalization"),
    medicalTreatment: real("MedicalTreatment"),
    oldMedicalTreatment: real("OldMedicalTreatment"),
    evacuated: real("Evacuated"),
    oldEvacuated: real("OldEvacuated"),
    shelteredInPlace: real("ShelteredInPlace"),
    oldShelteredInPlace: real("OldShelteredInPlace"),
    offsitePropertyDamage: real("OffsitePropertyDamage"),
    oldOffsitePropertyDamage: real("OldOffsitePropertyDamage"),
    edKills: integer("ED_Kills"),
    oldEdKills: integer("OldED_Kills"),
    edMinorDefoliation: integer("ED_MinorDefoliation"),
    oldEdMinorDefoliation: integer("OldED_MinorDefoliation"),
    edWaterContamination: integer("ED_WaterContamination"),
    oldEdWaterContamination: integer("OldED_WaterContamination"),
    edSoilContamination: integer("ED_SoilContamination"),
    oldEdSoilContamination: integer("OldED_SoilContamination"),
    edOther: text("ED_Other"),
    oldEdOther: text("OldED_Other"),
    initiatingEvent: text("InitiatingEvent"),
    oldInitiatingEvent: text("OldInitiatingEvent"),
    cfEquipmentFailure: integer("CF_EquipmentFailure"),
    oldCfEquipmentFailure: integer("OldCF_EquipmentFailure"),
    cfHumanError: integer("CF_HumanError"),
    oldCfHumanError: integer("OldCF_HumanError"),
    cfImproperProcedure: integer("CF_ImproperProcedure"),
    oldCfImproperProcedure: integer("OldCF_ImproperProcedure"),
    cfOverpressurization: integer("CF_Overpressurization"),
    oldCfOverpressurization: integer("OldCF_Overpressurization"),
    cfUpsetCondition: integer("CF_UpsetCondition"),
    oldCfUpsetCondition: integer("OldCF_UpsetCondition"),
    cfBypassCondition: integer("CF_BypassCondition"),
    oldCfBypassCondition: integer("OldCF_BypassCondition"),
    cfMaintenance: integer("CF_Maintenance"),
    oldCfMaintenance: integer("OldCF_Maintenance"),
    cfProcessDesignFailure: integer("CF_ProcessDesignFailure"),
    oldCfProcessDesignFailure: integer("OldCF_ProcessDesignFailure"),
    cfUnsuitableEquipment: integer("CF_UnsuitableEquipment"),
    oldCfUnsuitableEquipment: integer("OldCF_UnsuitableEquipment"),
    cfUnusualWeather: integer("CF_UnusualWeather"),
    oldCfUnusualWeather: integer("OldCF_UnusualWeather"),
    cfManagementError: integer("CF_ManagementError"),
    oldCfManagementError: integer("OldCF_ManagementError"),
    cfOther: text("CF_Other"),
    oldCfOther: text("OldCF_Other"),
    offsiteRespondersNotify: text("OffsiteRespondersNotify"),
    oldOffsiteRespondersNotify: text("OldOffsiteRespondersNotify"),
    ciImprovedEquipment: integer("CI_ImprovedEquipment"),
    oldCiImprovedEquipment: integer("OldCI_ImprovedEquipment"),
    ciRevisedMaintenance: integer("CI_RevisedMaintenance"),
    oldCiRevisedMaintenance: integer("OldCI_RevisedMaintenance"),
    ciRevisedTraining: integer("CI_RevisedTraining"),
    oldCiRevisedTraining: integer("OldCI_RevisedTraining"),
    ciRevisedOpProcedures: integer("CI_RevisedOpProcedures"),
    oldCiRevisedOpProcedures: integer("OldCI_RevisedOpProcedures"),
    ciNewProcessControls: integer("CI_NewProcessControls"),
    oldCiNewProcessControls: integer("OldCI_NewProcessControls"),
    ciNewMitigationSystems: integer("CI_NewMitigationSystems"),
    oldCiNewMitigationSystems: integer("OldCI_NewMitigationSystems"),
    ciRevisedErPlan: integer("CI_RevisedERPlan"),
    oldCiRevisedErPlan: integer("OldCI_RevisedERPlan"),
    ciChangedProcess: integer("CI_ChangedProcess"),
    oldCiChangedProcess: integer("OldCI_ChangedProcess"),
    ciReducedInventory: integer("CI_ReducedInventory"),
    oldCiReducedInventory: integer("OldCI_ReducedInventory"),
    ciNone: integer("CI_None"),
    oldCiNone: integer("OldCI_None"),
    ciOtherType: text("CI_OtherType"),
    oldCiOtherType: text("OldCI_OtherType"),
    cbiFlag: integer("CBI_Flag"),
    oldCbiFlag: integer("OldCBI_Flag"),
    publicMeeting: integer("PublicMeeting"),
    oldPublicMeeting: integer("OldPublicMeeting"),
    publicMeetingDate: numeric("PublicMeetingDate"),
    oldPublicMeetingDate: numeric("OldPublicMeetingDate"),
  }
);

export const tblS6FlammableMixtureChemicals = sqliteTable(
  "tblS6FlammableMixtureChemicals",
  {
    flamMixChemId: integer("FlamMixChemID"),
    accidentChemicalId: integer("AccidentChemicalID"),
    chemicalId: integer("ChemicalID"),
  }
);

export const tblS6FlammableMixtureChemicalsChangeHistory = sqliteTable(
  "tblS6FlammableMixtureChemicals_ChangeHistory",
  {
    accidentFlamMixChemChangeHistoryId: integer(
      "AccidentFlamMixChemChangeHistoryID"
    ),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    flamMixChemId: integer("FlamMixChemID"),
    accidentChemicalChangeHistoryId: integer("AccidentChemicalChangeHistoryID"),
    accidentChemicalId: integer("AccidentChemicalID"),
    chemicalId: integer("ChemicalID"),
  }
);

export const tblS7PreventionProgramChemicals = sqliteTable(
  "tblS7_Prevention_Program_Chemicals",
  {
    primaryKey: integer("PrimaryKey"),
    preventionProgram3Id: integer("PreventionProgram3ID"),
    processChemicalId: integer("ProcessChemicalID"),
  },
  (table) => [
    index("idx_tblS7_Prevention_Program_Chemicals_PreventionProgram3ID").on(
      table.preventionProgram3Id
    ),
  ]
);

export const tblS7PreventionProgramChemicalsChangeHistory = sqliteTable(
  "tblS7_Prevention_Program_Chemicals_ChangeHistory",
  {
    pp3ChemChangeHistoryId: integer("PP3ChemChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    pp3ChemId: integer("PP3ChemID"),
    preventionProgram3Id: integer("PreventionProgram3ID"),
    processChemicalId: integer("ProcessChemicalID"),
    processNaicsId: integer("Process_NAICS_ID"),
    naicsCode: text("NAICSCode"),
  }
);

export const tblS7PreventionProgram3 = sqliteTable(
  "tblS7PreventionProgram3",
  {
    preventionProgram3Id: integer("PreventionProgram3ID"),
    processNaicsId: integer("Process_NAICS_ID"),
    safetyReviewDate: numeric("SafetyReviewDate"),
    phaDate: numeric("PHA_Date"),
    phaWhatIf: integer("PHA_WhatIf"),
    phaChecklist: integer("PHA_Checklist"),
    phaWhatIfChecklist: integer("PHA_WhatIfChecklist"),
    phaHazop: integer("PHA_HAZOP"),
    phaFmea: integer("PHA_FMEA"),
    phaFta: integer("PHA_FTA"),
    phaOtherTechnique: text("PHA_OtherTechnique"),
    phaCompletionDate: numeric("PHACompletionDate"),
    mhToxicRelease: integer("MH_ToxicRelease"),
    mhFire: integer("MH_Fire"),
    mhExplosion: integer("MH_Explosion"),
    mhRunawayReaction: integer("MH_RunawayReaction"),
    mhPolymerization: integer("MH_Polymerization"),
    mhOverpressurization: integer("MH_Overpressurization"),
    mhCorrosion: integer("MH_Corrosion"),
    mhOverfilling: integer("MH_Overfilling"),
    mhContamination: integer("MH_Contamination"),
    mhEquipmentFailure: integer("MH_EquipmentFailure"),
    mhCoolingLoss: integer("MH_CoolingLoss"),
    mhEarthquake: integer("MH_Earthquake"),
    mhFloods: integer("MH_Floods"),
    mhTornado: integer("MH_Tornado"),
    mhHurricanes: integer("MH_Hurricanes"),
    mhOtherType: text("MH_OtherType"),
    pcVents: integer("PC_Vents"),
    pcReliefValves: integer("PC_ReliefValves"),
    pcCheckValves: integer("PC_CheckValves"),
    pcScrubbers: integer("PC_Scrubbers"),
    pcFlares: integer("PC_Flares"),
    pcManualShutoffs: integer("PC_ManualShutoffs"),
    pcAutomaticShutoffs: integer("PC_AutomaticShutoffs"),
    pcInterlocks: integer("PC_Interlocks"),
    pcAlarms: integer("PC_Alarms"),
    pcKeyedBypass: integer("PC_KeyedBypass"),
    pcEmergencyAirSupply: integer("PC_EmergencyAirSupply"),
    pcEmergencyPower: integer("PC_EmergencyPower"),
    pcBackupPump: integer("PC_BackupPump"),
    pcGroundingEquipment: integer("PC_GroundingEquipment"),
    pcInhibitorAddition: integer("PC_InhibitorAddition"),
    pcRuptureDisks: integer("PC_RuptureDisks"),
    pcExcessFlowDevice: integer("PC_ExcessFlowDevice"),
    pcQuenchSystem: integer("PC_QuenchSystem"),
    pcPurgeSystem: integer("PC_PurgeSystem"),
    pcNone: integer("PC_None"),
    pcOtherType: text("PC_OtherType"),
    msSprinklerSystem: integer("MS_SprinklerSystem"),
    msDikes: integer("MS_Dikes"),
    msFireWalls: integer("MS_FireWalls"),
    msBlastWalls: integer("MS_BlastWalls"),
    msDelugeSystem: integer("MS_DelugeSystem"),
    msWaterCurtain: integer("MS_WaterCurtain"),
    msEnclosure: integer("MS_Enclosure"),
    msNeutralization: integer("MS_Neutralization"),
    msNone: integer("MS_None"),
    msOtherType: text("MS_OtherType"),
    mdProcessAreaDetectors: integer("MD_ProcessAreaDetectors"),
    mdPerimeterMonitors: integer("MD_PerimeterMonitors"),
    mdNone: integer("MD_None"),
    mdOtherType: text("MD_OtherType"),
    chChemicalReduction: integer("CH_ChemicalReduction"),
    chChemicalIncrease: integer("CH_ChemicalIncrease"),
    chChangeProcessParameters: integer("CH_ChangeProcessParameters"),
    chInstallProcessControls: integer("CH_InstallProcessControls"),
    chInstallProcessDetection: integer("CH_InstallProcessDetection"),
    chInstallPerimeterMonitoring: integer("CH_InstallPerimeterMonitoring"),
    chInstallMitigationSystems: integer("CH_InstallMitigationSystems"),
    chNoneRequired: integer("CH_NoneRequired"),
    chNone: integer("CH_None"),
    chOtherChanges: text("CH_OtherChanges"),
    opProceduresReviewDate: numeric("OpProceduresReviewDate"),
    trainingReviewDate: numeric("TrainingReviewDate"),
    trClassroom: integer("TR_Classroom"),
    trOnTheJob: integer("TR_OnTheJob"),
    trOtherType: text("TR_OtherType"),
    ctWrittenTest: integer("CT_WrittenTest"),
    ctOralTest: integer("CT_OralTest"),
    ctDemonstration: integer("CT_Demonstration"),
    ctObservation: integer("CT_Observation"),
    ctOtherType: text("CT_OtherType"),
    maintenanceReviewDate: numeric("MaintenanceReviewDate"),
    equipmentInspectionDate: numeric("EquipmentInspectionDate"),
    equipmentTested: text("EquipmentTested"),
    changeMgmtDate: numeric("ChangeMgmtDate"),
    changeMgmtReviewDate: numeric("ChangeMgmtReviewDate"),
    preStartupReviewDate: numeric("PreStartupReviewDate"),
    complianceAuditDate: numeric("ComplianceAuditDate"),
    auditCompletionDate: numeric("AuditCompletionDate"),
    incidentInvestigationDate: numeric("IncidentInvestigationDate"),
    investigationChangeDate: numeric("InvestigationChangeDate"),
    participationPlansReviewDate: numeric("ParticipationPlansReviewDate"),
    hotWorkPermitReviewDate: numeric("HotWorkPermitReviewDate"),
    contractorSafetyReviewDate: numeric("ContractorSafetyReviewDate"),
    contractorSafetyEvalDate: numeric("ContractorSafetyEvalDate"),
    cbiFlag: integer("CBI_Flag"),
    description: text("Description"),
  },
  (table) => [
    index("idx_tblS7PreventionProgram3_Process_NAICS_ID").on(
      table.processNaicsId
    ),
  ]
);

export const tblS7PreventionProgram3DescriptionChangeHistory = sqliteTable(
  "tblS7PreventionProgram3Description_ChangeHistory",
  {
    preventionProgram3DescChangeHistoryId: integer(
      "PreventionProgram3DescChangeHistoryID"
    ),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    preventionProgram3Id: integer("PreventionProgram3ID"),
    description: text("Description"),
    oldDescription: text("OldDescription"),
    seqNum: integer("SeqNum"),
  }
);

export const tblS8PreventionProgramChemicals = sqliteTable(
  "tblS8_Prevention_Program_Chemicals",
  {
    primaryKey: integer("PrimaryKey"),
    preventionProgram2Id: integer("PreventionProgram2ID"),
    processChemicalId: integer("ProcessChemicalID"),
  },
  (table) => [
    index("idx_tblS8_Prevention_Program_Chemicals_PreventionProgram2ID").on(
      table.preventionProgram2Id
    ),
  ]
);

export const tblS8PreventionProgramChemicalsChangeHistory = sqliteTable(
  "tblS8_Prevention_Program_Chemicals_ChangeHistory",
  {
    pp2ChemChangeHistoryId: integer("PP2ChemChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    pp2ChemId: integer("PP2ChemID"),
    preventionProgram2Id: integer("PreventionProgram2ID"),
    processChemicalId: integer("ProcessChemicalID"),
    processNaicsId: integer("Process_NAICS_ID"),
    naicsCode: text("NAICSCode"),
  }
);

export const tblS8PreventionProgram2 = sqliteTable(
  "tblS8PreventionProgram2",
  {
    preventionProgram2Id: integer("PreventionProgram2ID"),
    processNaicsId: integer("Process_NAICS_ID"),
    safetyReviewDate: numeric("SafetyReviewDate"),
    frNfpa58: integer("FR_NFPA58"),
    frOsha: integer("FR_OSHA"),
    frAstm: integer("FR_ASTM"),
    frAnsi: integer("FR_ANSI"),
    frAsme: integer("FR_ASME"),
    frNone: integer("FR_None"),
    frOtherType: text("FR_OtherType"),
    frComments: text("FR_Comments"),
    hazardReviewDate: numeric("HazardReviewDate"),
    changeCompletionDate: numeric("ChangeCompletionDate"),
    mhToxicRelease: integer("MH_ToxicRelease"),
    mhFire: integer("MH_Fire"),
    mhExplosion: integer("MH_Explosion"),
    mhRunawayReaction: integer("MH_RunawayReaction"),
    mhPolymerization: integer("MH_Polymerization"),
    mhOverpressurization: integer("MH_Overpressurization"),
    mhCorrosion: integer("MH_Corrosion"),
    mhOverfilling: integer("MH_Overfilling"),
    mhContamination: integer("MH_Contamination"),
    mhEquipmentFailure: integer("MH_EquipmentFailure"),
    mhCoolingLoss: integer("MH_CoolingLoss"),
    mhEarthquake: integer("MH_Earthquake"),
    mhFloods: integer("MH_Floods"),
    mhTornado: integer("MH_Tornado"),
    mhHurricanes: integer("MH_Hurricanes"),
    mhOtherType: text("MH_OtherType"),
    pcVents: integer("PC_Vents"),
    pcReliefValves: integer("PC_ReliefValves"),
    pcCheckValves: integer("PC_CheckValves"),
    pcScrubbers: integer("PC_Scrubbers"),
    pcFlares: integer("PC_Flares"),
    pcManualShutoffs: integer("PC_ManualShutoffs"),
    pcAutomaticShutoffs: integer("PC_AutomaticShutoffs"),
    pcInterlocks: integer("PC_Interlocks"),
    pcAlarms: integer("PC_Alarms"),
    pcKeyedBypass: integer("PC_KeyedBypass"),
    pcEmergencyAirSupply: integer("PC_EmergencyAirSupply"),
    pcEmergencyPower: integer("PC_EmergencyPower"),
    pcBackupPump: integer("PC_BackupPump"),
    pcGroundingEquipment: integer("PC_GroundingEquipment"),
    pcInhibitorAddition: integer("PC_InhibitorAddition"),
    pcRuptureDisks: integer("PC_RuptureDisks"),
    pcExcessFlowDevice: integer("PC_ExcessFlowDevice"),
    pcQuenchSystem: integer("PC_QuenchSystem"),
    pcPurgeSystem: integer("PC_PurgeSystem"),
    pcNone: integer("PC_None"),
    pcOtherType: text("PC_OtherType"),
    msSprinklerSystem: integer("MS_SprinklerSystem"),
    msDikes: integer("MS_Dikes"),
    msFireWalls: integer("MS_FireWalls"),
    msBlastWalls: integer("MS_BlastWalls"),
    msDelugeSystem: integer("MS_DelugeSystem"),
    msWaterCurtain: integer("MS_WaterCurtain"),
    msEnclosure: integer("MS_Enclosure"),
    msNeutralization: integer("MS_Neutralization"),
    msNone: integer("MS_None"),
    msOtherType: text("MS_OtherType"),
    mdProcessAreaDetectors: integer("MD_ProcessAreaDetectors"),
    mdPerimeterMonitors: integer("MD_PerimeterMonitors"),
    mdNone: integer("MD_None"),
    mdOtherType: text("MD_OtherType"),
    chChemicalReduction: integer("CH_ChemicalReduction"),
    chChemicalIncrease: integer("CH_ChemicalIncrease"),
    chChangeProcessParameters: integer("CH_ChangeProcessParameters"),
    chInstallProcessControls: integer("CH_InstallProcessControls"),
    chInstallProcessDetection: integer("CH_InstallProcessDetection"),
    chInstallPerimeterMonitoring: integer("CH_InstallPerimeterMonitoring"),
    chInstallMitigationSystems: integer("CH_InstallMitigationSystems"),
    chNoneRequired: integer("CH_NoneRequired"),
    chNone: integer("CH_None"),
    chOtherChanges: text("CH_OtherChanges"),
    opProceduresReviewDate: numeric("OpProceduresReviewDate"),
    trainingReviewDate: numeric("TrainingReviewDate"),
    trClassroom: integer("TR_Classroom"),
    trOnTheJob: integer("TR_OnTheJob"),
    trOtherType: text("TR_OtherType"),
    ctWrittenTest: integer("CT_WrittenTest"),
    ctOralTest: integer("CT_OralTest"),
    ctDemonstration: integer("CT_Demonstration"),
    ctObservation: integer("CT_Observation"),
    ctOtherType: text("CT_OtherType"),
    maintenanceReviewDate: numeric("MaintenanceReviewDate"),
    equipmentInspectionDate: numeric("EquipmentInspectionDate"),
    equipmentTested: text("EquipmentTested"),
    complianceAuditDate: numeric("ComplianceAuditDate"),
    auditCompletionDate: numeric("AuditCompletionDate"),
    incidentInvestigationDate: numeric("IncidentInvestigationDate"),
    investigationChangeDate: numeric("InvestigationChangeDate"),
    mostRecentChangeDate: numeric("MostRecentChangeDate"),
    cbiFlag: integer("CBI_Flag"),
    description: text("Description"),
  },
  (table) => [
    index("idx_tblS8PreventionProgram2_Process_NAICS_ID").on(
      table.processNaicsId
    ),
  ]
);

export const tblS8PreventionProgram2ChangeHistory = sqliteTable(
  "tblS8PreventionProgram2_ChangeHistory",
  {
    preventionProgram2ChangeHistoryId: integer(
      "PreventionProgram2ChangeHistoryID"
    ),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    preventionProgram2Id: integer("PreventionProgram2ID"),
    naicsCode: text("NAICSCode"),
    processNaicsId: integer("Process_NAICS_ID"),
    processId: integer("ProcessID"),
    safetyReviewDate: numeric("SafetyReviewDate"),
    oldSafetyReviewDate: numeric("OldSafetyReviewDate"),
    frNfpa58: integer("FR_NFPA58"),
    oldFrNfpa58: integer("OldFR_NFPA58"),
    frOsha: integer("FR_OSHA"),
    oldFrOsha: integer("OldFR_OSHA"),
    frAstm: integer("FR_ASTM"),
    oldFrAstm: integer("OldFR_ASTM"),
    frAnsi: integer("FR_ANSI"),
    oldFrAnsi: integer("OldFR_ANSI"),
    frAsme: integer("FR_ASME"),
    oldFrAsme: integer("OldFR_ASME"),
    frNone: integer("FR_None"),
    oldFrNone: integer("OldFR_None"),
    frOtherType: text("FR_OtherType"),
    oldFrOtherType: text("OldFR_OtherType"),
    frComments: text("FR_Comments"),
    oldFrComments: text("OldFR_Comments"),
    hazardReviewDate: numeric("HazardReviewDate"),
    oldHazardReviewDate: numeric("OldHazardReviewDate"),
    changeCompletionDate: numeric("ChangeCompletionDate"),
    oldChangeCompletionDate: numeric("OldChangeCompletionDate"),
    mhToxicRelease: integer("MH_ToxicRelease"),
    oldMhToxicRelease: integer("OldMH_ToxicRelease"),
    mhFire: integer("MH_Fire"),
    oldMhFire: integer("OldMH_Fire"),
    mhExplosion: integer("MH_Explosion"),
    oldMhExplosion: integer("OldMH_Explosion"),
    mhRunawayReaction: integer("MH_RunawayReaction"),
    oldMhRunawayReaction: integer("OldMH_RunawayReaction"),
    mhPolymerization: integer("MH_Polymerization"),
    oldMhPolymerization: integer("OldMH_Polymerization"),
    mhOverpressurization: integer("MH_Overpressurization"),
    oldMhOverpressurization: integer("OldMH_Overpressurization"),
    mhCorrosion: integer("MH_Corrosion"),
    oldMhCorrosion: integer("OldMH_Corrosion"),
    mhOverfilling: integer("MH_Overfilling"),
    oldMhOverfilling: integer("OldMH_Overfilling"),
    mhContamination: integer("MH_Contamination"),
    oldMhContamination: integer("OldMH_Contamination"),
    mhEquipmentFailure: integer("MH_EquipmentFailure"),
    oldMhEquipmentFailure: integer("OldMH_EquipmentFailure"),
    mhCoolingLoss: integer("MH_CoolingLoss"),
    oldMhCoolingLoss: integer("OldMH_CoolingLoss"),
    mhEarthquake: integer("MH_Earthquake"),
    oldMhEarthquake: integer("OldMH_Earthquake"),
    mhFloods: integer("MH_Floods"),
    oldMhFloods: integer("OldMH_Floods"),
    mhTornado: integer("MH_Tornado"),
    oldMhTornado: integer("OldMH_Tornado"),
    mhHurricanes: integer("MH_Hurricanes"),
    oldMhHurricanes: integer("OldMH_Hurricanes"),
    mhOtherType: text("MH_OtherType"),
    oldMhOtherType: text("OldMH_OtherType"),
    pcVents: integer("PC_Vents"),
    oldPcVents: integer("OldPC_Vents"),
    pcReliefValves: integer("PC_ReliefValves"),
    oldPcReliefValves: integer("OldPC_ReliefValves"),
    pcCheckValves: integer("PC_CheckValves"),
    oldPcCheckValves: integer("OldPC_CheckValves"),
    pcScrubbers: integer("PC_Scrubbers"),
    oldPcScrubbers: integer("OldPC_Scrubbers"),
    pcFlares: integer("PC_Flares"),
    oldPcFlares: integer("OldPC_Flares"),
    pcManualShutoffs: integer("PC_ManualShutoffs"),
    oldPcManualShutoffs: integer("OldPC_ManualShutoffs"),
    pcAutomaticShutoffs: integer("PC_AutomaticShutoffs"),
    oldPcAutomaticShutoffs: integer("OldPC_AutomaticShutoffs"),
    pcInterlocks: integer("PC_Interlocks"),
    oldPcInterlocks: integer("OldPC_Interlocks"),
    pcAlarms: integer("PC_Alarms"),
    oldPcAlarms: integer("OldPC_Alarms"),
    pcKeyedBypass: integer("PC_KeyedBypass"),
    oldPcKeyedBypass: integer("OldPC_KeyedBypass"),
    pcEmergencyAirSupply: integer("PC_EmergencyAirSupply"),
    oldPcEmergencyAirSupply: integer("OldPC_EmergencyAirSupply"),
    pcEmergencyPower: integer("PC_EmergencyPower"),
    oldPcEmergencyPower: integer("OldPC_EmergencyPower"),
    pcBackupPump: integer("PC_BackupPump"),
    oldPcBackupPump: integer("OldPC_BackupPump"),
    pcGroundingEquipment: integer("PC_GroundingEquipment"),
    oldPcGroundingEquipment: integer("OldPC_GroundingEquipment"),
    pcInhibitorAddition: integer("PC_InhibitorAddition"),
    oldPcInhibitorAddition: integer("OldPC_InhibitorAddition"),
    pcRuptureDisks: integer("PC_RuptureDisks"),
    oldPcRuptureDisks: integer("OldPC_RuptureDisks"),
    pcExcessFlowDevice: integer("PC_ExcessFlowDevice"),
    oldPcExcessFlowDevice: integer("OldPC_ExcessFlowDevice"),
    pcQuenchSystem: integer("PC_QuenchSystem"),
    oldPcQuenchSystem: integer("OldPC_QuenchSystem"),
    pcPurgeSystem: integer("PC_PurgeSystem"),
    oldPcPurgeSystem: integer("OldPC_PurgeSystem"),
    pcNone: integer("PC_None"),
    oldPcNone: integer("OldPC_None"),
    pcOtherType: text("PC_OtherType"),
    oldPcOtherType: text("OldPC_OtherType"),
    msSprinklerSystem: integer("MS_SprinklerSystem"),
    oldMsSprinklerSystem: integer("OldMS_SprinklerSystem"),
    msDikes: integer("MS_Dikes"),
    oldMsDikes: integer("OldMS_Dikes"),
    msFireWalls: integer("MS_FireWalls"),
    oldMsFireWalls: integer("OldMS_FireWalls"),
    msBlastWalls: integer("MS_BlastWalls"),
    oldMsBlastWalls: integer("OldMS_BlastWalls"),
    msDelugeSystem: integer("MS_DelugeSystem"),
    oldMsDelugeSystem: integer("OldMS_DelugeSystem"),
    msWaterCurtain: integer("MS_WaterCurtain"),
    oldMsWaterCurtain: integer("OldMS_WaterCurtain"),
    msEnclosure: integer("MS_Enclosure"),
    oldMsEnclosure: integer("OldMS_Enclosure"),
    msNeutralization: integer("MS_Neutralization"),
    oldMsNeutralization: integer("OldMS_Neutralization"),
    msNone: integer("MS_None"),
    oldMsNone: integer("OldMS_None"),
    msOtherType: text("MS_OtherType"),
    oldMsOtherType: text("OldMS_OtherType"),
    mdProcessAreaDetectors: integer("MD_ProcessAreaDetectors"),
    oldMdProcessAreaDetectors: integer("OldMD_ProcessAreaDetectors"),
    mdPerimeterMonitors: integer("MD_PerimeterMonitors"),
    oldMdPerimeterMonitors: integer("OldMD_PerimeterMonitors"),
    mdNone: integer("MD_None"),
    oldMdNone: integer("OldMD_None"),
    mdOtherType: text("MD_OtherType"),
    oldMdOtherType: text("OldMD_OtherType"),
    chChemicalReduction: integer("CH_ChemicalReduction"),
    oldChChemicalReduction: integer("OldCH_ChemicalReduction"),
    chChemicalIncrease: integer("CH_ChemicalIncrease"),
    oldChChemicalIncrease: integer("OldCH_ChemicalIncrease"),
    chChangeProcessParameters: integer("CH_ChangeProcessParameters"),
    oldChChangeProcessParameters: integer("OldCH_ChangeProcessParameters"),
    chInstallProcessControls: integer("CH_InstallProcessControls"),
    oldChInstallProcessControls: integer("OldCH_InstallProcessControls"),
    chInstallProcessDetection: integer("CH_InstallProcessDetection"),
    oldChInstallProcessDetection: integer("OldCH_InstallProcessDetection"),
    chInstallPerimeterMonitoring: integer("CH_InstallPerimeterMonitoring"),
    oldChInstallPerimeterMonitoring: integer(
      "OldCH_InstallPerimeterMonitoring"
    ),
    chInstallMitigationSystems: integer("CH_InstallMitigationSystems"),
    oldChInstallMitigationSystems: integer("OldCH_InstallMitigationSystems"),
    chNoneRequired: integer("CH_NoneRequired"),
    oldChNoneRequired: integer("OldCH_NoneRequired"),
    chNone: integer("CH_None"),
    oldChNone: integer("OldCH_None"),
    chOtherChanges: text("CH_OtherChanges"),
    oldChOtherChanges: text("OldCH_OtherChanges"),
    opProceduresReviewDate: numeric("OpProceduresReviewDate"),
    oldOpProceduresReviewDate: numeric("OldOpProceduresReviewDate"),
    trainingReviewDate: numeric("TrainingReviewDate"),
    oldTrainingReviewDate: numeric("OldTrainingReviewDate"),
    trClassroom: integer("TR_Classroom"),
    oldTrClassroom: integer("OldTR_Classroom"),
    trOnTheJob: integer("TR_OnTheJob"),
    oldTrOnTheJob: integer("OldTR_OnTheJob"),
    trOtherType: text("TR_OtherType"),
    oldTrOtherType: text("OldTR_OtherType"),
    ctWrittenTest: integer("CT_WrittenTest"),
    oldCtWrittenTest: integer("OldCT_WrittenTest"),
    ctOralTest: integer("CT_OralTest"),
    oldCtOralTest: integer("OldCT_OralTest"),
    ctDemonstration: integer("CT_Demonstration"),
    oldCtDemonstration: integer("OldCT_Demonstration"),
    ctObservation: integer("CT_Observation"),
    oldCtObservation: integer("OldCT_Observation"),
    ctOtherType: text("CT_OtherType"),
    oldCtOtherType: text("OldCT_OtherType"),
    maintenanceReviewDate: numeric("MaintenanceReviewDate"),
    oldMaintenanceReviewDate: numeric("OldMaintenanceReviewDate"),
    equipmentInspectionDate: numeric("EquipmentInspectionDate"),
    oldEquipmentInspectionDate: numeric("OldEquipmentInspectionDate"),
    equipmentTested: text("EquipmentTested"),
    oldEquipmentTested: text("OldEquipmentTested"),
    complianceAuditDate: numeric("ComplianceAuditDate"),
    oldComplianceAuditDate: numeric("OldComplianceAuditDate"),
    auditCompletionDate: numeric("AuditCompletionDate"),
    oldAuditCompletionDate: numeric("OldAuditCompletionDate"),
    incidentInvestigationDate: numeric("IncidentInvestigationDate"),
    oldIncidentInvestigationDate: numeric("OldIncidentInvestigationDate"),
    investigationChangeDate: numeric("InvestigationChangeDate"),
    oldInvestigationChangeDate: numeric("OldInvestigationChangeDate"),
    mostRecentChangeDate: numeric("MostRecentChangeDate"),
    oldMostRecentChangeDate: numeric("OldMostRecentChangeDate"),
  }
);

export const tblS8PreventionProgram2DescriptionChangeHistory = sqliteTable(
  "tblS8PreventionProgram2Description_ChangeHistory",
  {
    preventionProgram2DescChangeHistoryId: integer(
      "PreventionProgram2DescChangeHistoryID"
    ),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    preventionProgram2Id: integer("PreventionProgram2ID"),
    description: text("Description"),
    oldDescription: text("OldDescription"),
    seqNum: integer("SeqNum"),
  }
);

export const tblS9EmergencyResponses = sqliteTable("tblS9EmergencyResponses", {
  facilityId: integer("FacilityID"),
  erCommunityPlan: integer("ER_CommunityPlan"),
  erFacilityPlan: integer("ER_FacilityPlan"),
  erResponseActions: integer("ER_ResponseActions"),
  erPublicInfoProcedures: integer("ER_PublicInfoProcedures"),
  erEmergencyHealthCare: integer("ER_EmergencyHealthCare"),
  erReviewDate: numeric("ER_ReviewDate"),
  erTrainingDate: numeric("ERTrainingDate"),
  coordinatingAgencyName: text("CoordinatingAgencyName"),
  coordinatingAgencyPhone: text("CoordinatingAgencyPhone"),
  frOsha191038: integer("FR_OSHA1910_38"),
  frOsha1910120: integer("FR_OSHA1910_120"),
  frSpcc: integer("FR_SPCC"),
  frRcra: integer("FR_RCRA"),
  frOpa90: integer("FR_OPA90"),
  frEpcra: integer("FR_EPCRA"),
  frOtherRegulation: text("FR_OtherRegulation"),
  exercisePlan: integer("ExercisePlan"),
  exercisePlanDate: numeric("ExercisePlanDate"),
  notificationDrill: integer("NotificationDrill"),
  notificationDrillDate: numeric("NotificationDrillDate"),
  tabletopExercise: integer("TabletopExercise"),
  tabletopExerciseDate: numeric("TabletopExerciseDate"),
  lepcCoordination: integer("LEPCCoordination"),
  lepcCoordinationDate: numeric("LEPCCoordinationDate"),
  lepcCoordinationReason: text("LEPCCoordinationReason"),
  localResponseAgencyCoordination: integer("LocalResponseAgencyCoordination"),
  localResponseAgencyCoordinationDate: numeric(
    "LocalResponseAgencyCoordinationDate"
  ),
  localResponseAgencyCoordinationReason: text(
    "LocalResponseAgencyCoordinationReason"
  ),
  stationarySource: integer("StationarySource"),
});

export const tblS9EmergencyResponsesChangeHistory = sqliteTable(
  "tblS9EmergencyResponses_ChangeHistory",
  {
    erPlanChangeId: integer("ERPlanChangeID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    facilityId: integer("FacilityID"),
    erCommunityPlan: integer("ER_CommunityPlan"),
    oldErCommunityPlan: integer("OldER_CommunityPlan"),
    erFacilityPlan: integer("ER_FacilityPlan"),
    oldErFacilityPlan: integer("OldER_FacilityPlan"),
    erResponseActions: integer("ER_ResponseActions"),
    oldErResponseActions: integer("OldER_ResponseActions"),
    erPublicInfoProcedures: integer("ER_PublicInfoProcedures"),
    oldErPublicInfoProcedures: integer("OldER_PublicInfoProcedures"),
    erEmergencyHealthCare: integer("ER_EmergencyHealthCare"),
    oldErEmergencyHealthCare: integer("OldER_EmergencyHealthCare"),
    erReviewDate: numeric("ER_ReviewDate"),
    oldErReviewDate: numeric("OldER_ReviewDate"),
    erTrainingDate: numeric("ERTrainingDate"),
    oldErTrainingDate: numeric("OldERTrainingDate"),
    coordinatingAgencyName: text("CoordinatingAgencyName"),
    oldCoordinatingAgencyName: text("OldCoordinatingAgencyName"),
    coordinatingAgencyPhone: text("CoordinatingAgencyPhone"),
    oldCoordinatingAgencyPhone: text("OldCoordinatingAgencyPhone"),
    frOsha191038: integer("FR_OSHA1910_38"),
    oldFrOsha191038: integer("OldFR_OSHA1910_38"),
    frOsha1910120: integer("FR_OSHA1910_120"),
    oldFrOsha1910120: integer("OldFR_OSHA1910_120"),
    frSpcc: integer("FR_SPCC"),
    oldFrSpcc: integer("OldFR_SPCC"),
    frRcra: integer("FR_RCRA"),
    oldFrRcra: integer("OldFR_RCRA"),
    frOpa90: integer("FR_OPA90"),
    oldFrOpa90: integer("OldFR_OPA90"),
    frEpcra: integer("FR_EPCRA"),
    oldFrEpcra: integer("OldFR_EPCRA"),
    frOtherRegulation: text("FR_OtherRegulation"),
    oldFrOtherRegulation: text("OldFR_OtherRegulation"),
    exercisePlan: integer("ExercisePlan"),
    oldExercisePlan: integer("OldExercisePlan"),
    exercisePlanDate: numeric("ExercisePlanDate"),
    oldExercisePlanDate: numeric("OldExercisePlanDate"),
    notificationDrill: integer("NotificationDrill"),
    oldNotificationDrill: integer("OldNotificationDrill"),
    notificationDrillDate: numeric("NotificationDrillDate"),
    oldNotificationDrillDate: numeric("OldNotificationDrillDate"),
    tabletopExercise: integer("TabletopExercise"),
    oldTabletopExercise: integer("OldTabletopExercise"),
    tabletopExerciseDate: numeric("TabletopExerciseDate"),
    oldTabletopExerciseDate: numeric("OldTabletopExerciseDate"),
    lepcCoordination: integer("LEPCCoordination"),
    oldLepcCoordination: integer("OldLEPCCoordination"),
    lepcCoordinationDate: numeric("LEPCCoordinationDate"),
    oldLepcCoordinationDate: numeric("OldLEPCCoordinationDate"),
    lepcCoordinationReason: text("LEPCCoordinationReason"),
    oldLepcCoordinationReason: text("OldLEPCCoordinationReason"),
    localResponseAgencyCoordination: integer("LocalResponseAgencyCoordination"),
    oldLocalResponseAgencyCoordination: integer(
      "OldLocalResponseAgencyCoordination"
    ),
    localResponseAgencyCoordinationDate: numeric(
      "LocalResponseAgencyCoordinationDate"
    ),
    oldLocalResponseAgencyCoordinationDate: numeric(
      "OldLocalResponseAgencyCoordinationDate"
    ),
    localResponseAgencyCoordinationReason: text(
      "LocalResponseAgencyCoordinationReason"
    ),
    oldLocalResponseAgencyCoordinationReason: text(
      "OldLocalResponseAgencyCoordinationReason"
    ),
    stationarySource: integer("StationarySource"),
    oldStationarySource: integer("OldStationarySource"),
  }
);

export const tlkpAdminRefreshInfo = sqliteTable("tlkpAdminRefreshInfo", {
  id: integer("ID"),
  dateRefreshed: numeric("DateRefreshed"),
});

export const tlkpChemicals = sqliteTable("tlkpChemicals", {
  chemicalId: integer("ChemicalID"),
  chemicalName: text("ChemicalName"),
  casNumber: text("CASNumber"),
  threshold: real("Threshold"),
  chemType: text("ChemType"),
  flgCbi: integer(),
  chemOwner: text("ChemOwner"),
});

export const tlkpDeregistrationReason = sqliteTable(
  "tlkpDeregistrationReason",
  {
    lookupCode: text("LookupCode"),
    description: text("Description"),
  }
);

export const tlkpDocHandle = sqliteTable("tlkpDocHandle", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpDocType = sqliteTable("tlkpDocType", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpForeignCountry = sqliteTable("tlkpForeignCountry", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpLatLongDescriptions = sqliteTable("tlkpLatLongDescriptions", {
  featCode: text("Feat_Code"),
  featDesc: text("Feat_Desc"),
});

export const tlkpLatLongMethods = sqliteTable("tlkpLatLongMethods", {
  primaryKey: integer("Primary_Key"),
  methodCode: text("Method_Code"),
  methodDesc: text("Method_Desc"),
});

export const tlkpNaics = sqliteTable("tlkpNAICS", {
  naicsCode: text("NAICS_CODE"),
  naicsDescription: text("NAICS_DESCRIPTION"),
});

export const tlkpRejectReason = sqliteTable("tlkpRejectReason", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpS2ScenarioCodes = sqliteTable("tlkpS2ScenarioCodes", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpS6InitiatingEvents = sqliteTable("tlkpS6InitiatingEvents", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpStateFipsCodes = sqliteTable("tlkpStateFIPSCodes", {
  stateCode: text("STATE_CODE"),
  stateAbbr: text("STATE_ABBR"),
  stateName: text("STATE_NAME"),
  region: text("REGION"),
});

export const tlkpSubmissionReasonCodes = sqliteTable(
  "tlkpSubmissionReasonCodes",
  {
    lookupCode: text("LookupCode"),
    description: text("Description"),
  }
);

export const tlkpTopographyCode = sqliteTable("tlkpTopographyCode", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tlkpWindSpeedUnitCodes = sqliteTable("tlkpWindSpeedUnitCodes", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});

export const tblS4FlammablesWorstCase = sqliteTable(
  "tblS4FlammablesWorstCase",
  {
    flammableId: integer("FlammableID"),
    processChemicalId: integer("ProcessChemicalID"),
    analyticalBasis: text("AnalyticalBasis"),
    quantityReleased: real("QuantityReleased"),
    distance2Endpoint: real("Distance2Endpoint"),
    residentialPopulation: integer("ResidentialPopulation"),
    prSchools: integer("PR_Schools"),
    prResidences: integer("PR_Residences"),
    prHospitals: integer("PR_Hospitals"),
    prPrisons: integer("PR_Prisons"),
    prPublicRecreation: integer("PR_PublicRecreation"),
    prCommInd: integer("PR_Comm_Ind"),
    prOtherType: text("PR_OtherType"),
    erNatlStateParks: integer("ER_NatlStateParks"),
    erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
    erFedWilderness: integer("ER_FedWilderness"),
    erOtherType: text("ER_OtherType"),
    pmBlastWalls: integer("PM_BlastWalls"),
    pmOtherType: text("PM_OtherType"),
    cbiFlag: integer("CBI_Flag"),
  }
);

export const tblS5FlammablesAltReleasesChangeHistory = sqliteTable(
  "tblS5FlammablesAltReleases_ChangeHistory",
  {
    flammableAltChangeHistoryId: integer("FlammableAltChangeHistoryID"),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    flammableId: integer("FlammableID"),
    processChemicalId: integer("ProcessChemicalID"),
    analyticalBasis: text("AnalyticalBasis"),
    oldAnalyticalBasis: text("OldAnalyticalBasis"),
    scenario: text("Scenario"),
    oldScenario: text("OldScenario"),
    quantityReleased: real("QuantityReleased"),
    oldQuantityReleased: real("OldQuantityReleased"),
    endpointUsed: text("EndpointUsed"),
    oldEndpointUsed: text("OldEndpointUsed"),
    lflValue: real("LFL_Value"),
    oldLflValue: real("OldLFL_Value"),
    distance2Endpoint: real("Distance2Endpoint"),
    oldDistance2Endpoint: real("OldDistance2Endpoint"),
    residentialPopulation: integer("ResidentialPopulation"),
    oldResidentialPopulation: integer("OldResidentialPopulation"),
    prSchools: integer("PR_Schools"),
    oldPrSchools: integer("OldPR_Schools"),
    prResidences: integer("PR_Residences"),
    oldPrResidences: integer("OldPR_Residences"),
    prHospitals: integer("PR_Hospitals"),
    oldPrHospitals: integer("OldPR_Hospitals"),
    prPrisons: integer("PR_Prisons"),
    oldPrPrisons: integer("OldPR_Prisons"),
    prPublicRecreation: integer("PR_PublicRecreation"),
    oldPrPublicRecreation: integer("OldPR_PublicRecreation"),
    prCommInd: integer("PR_Comm_Ind"),
    oldPrCommInd: integer("OldPR_Comm_Ind"),
    prOtherType: text("PR_OtherType"),
    oldPrOtherType: text("OldPR_OtherType"),
    erNatlStateParks: integer("ER_NatlStateParks"),
    oldErNatlStateParks: integer("OldER_NatlStateParks"),
    erWildlifeSanctuary: integer("ER_WildlifeSanctuary"),
    oldErWildlifeSanctuary: integer("OldER_WildlifeSanctuary"),
    erFedWilderness: integer("ER_FedWilderness"),
    oldErFedWilderness: integer("OldER_FedWilderness"),
    erOtherType: text("ER_OtherType"),
    oldErOtherType: text("OldER_OtherType"),
    pmDikes: integer("PM_Dikes"),
    oldPmDikes: integer("OldPM_Dikes"),
    pmFireWalls: integer("PM_FireWalls"),
    oldPmFireWalls: integer("OldPM_FireWalls"),
    pmBlastWalls: integer("PM_BlastWalls"),
    oldPmBlastWalls: integer("OldPM_BlastWalls"),
    pmEnclosures: integer("PM_Enclosures"),
    oldPmEnclosures: integer("OldPM_Enclosures"),
    pmOtherType: text("PM_OtherType"),
    oldPmOtherType: text("OldPM_OtherType"),
    amSprinklerSystems: integer("AM_SprinklerSystems"),
    oldAmSprinklerSystems: integer("OldAM_SprinklerSystems"),
    amDelugeSystems: integer("AM_DelugeSystems"),
    oldAmDelugeSystems: integer("OldAM_DelugeSystems"),
    amWaterCurtain: integer("AM_WaterCurtain"),
    oldAmWaterCurtain: integer("OldAM_WaterCurtain"),
    amExcessFlowValve: integer("AM_ExcessFlowValve"),
    oldAmExcessFlowValve: integer("OldAM_ExcessFlowValve"),
    amOtherType: text("AM_OtherType"),
    oldAmOtherType: text("OldAM_OtherType"),
    ptrGraphic: text(),
    oldptrGraphic: text("OldptrGraphic"),
  }
);

export const tblS7PreventionProgram3ChangeHistory = sqliteTable(
  "tblS7PreventionProgram3_ChangeHistory",
  {
    preventionProgram3ChangeHistoryId: integer(
      "PreventionProgram3ChangeHistoryID"
    ),
    facilityChangeHistoryId: integer("FacilityChangeHistoryID"),
    cdxCorrectionCode: text("CDXCorrectionCode"),
    preventionProgram3Id: integer("PreventionProgram3ID"),
    naicsCode: text("NAICSCode"),
    processNaicsId: integer("Process_NAICS_ID"),
    processId: integer("ProcessID"),
    safetyReviewDate: numeric("SafetyReviewDate"),
    oldSafetyReviewDate: numeric("OldSafetyReviewDate"),
    phaDate: numeric("PHA_Date"),
    oldPhaDate: numeric("OldPHA_Date"),
    phaWhatIf: integer("PHA_WhatIf"),
    oldPhaWhatIf: integer("OldPHA_WhatIf"),
    phaChecklist: integer("PHA_Checklist"),
    oldPhaChecklist: integer("OldPHA_Checklist"),
    phaWhatIfChecklist: integer("PHA_WhatIfChecklist"),
    oldPhaWhatIfChecklist: integer("OldPHA_WhatIfChecklist"),
    phaHazop: integer("PHA_HAZOP"),
    oldPhaHazop: integer("OldPHA_HAZOP"),
    phaFmea: integer("PHA_FMEA"),
    oldPhaFmea: integer("OldPHA_FMEA"),
    phaFta: integer("PHA_FTA"),
    oldPhaFta: integer("OldPHA_FTA"),
    phaOtherTechnique: text("PHA_OtherTechnique"),
    oldPhaOtherTechnique: text("OldPHA_OtherTechnique"),
    phaCompletionDate: numeric("PHACompletionDate"),
    oldPhaCompletionDate: numeric("OldPHACompletionDate"),
    mhToxicRelease: integer("MH_ToxicRelease"),
    oldMhToxicRelease: integer("OldMH_ToxicRelease"),
    mhFire: integer("MH_Fire"),
    oldMhFire: integer("OldMH_Fire"),
    mhExplosion: integer("MH_Explosion"),
    oldMhExplosion: integer("OldMH_Explosion"),
    mhRunawayReaction: integer("MH_RunawayReaction"),
    oldMhRunawayReaction: integer("OldMH_RunawayReaction"),
    mhPolymerization: integer("MH_Polymerization"),
    oldMhPolymerization: integer("OldMH_Polymerization"),
    mhOverpressurization: integer("MH_Overpressurization"),
    oldMhOverpressurization: integer("OldMH_Overpressurization"),
    mhCorrosion: integer("MH_Corrosion"),
    oldMhCorrosion: integer("OldMH_Corrosion"),
    mhOverfilling: integer("MH_Overfilling"),
    oldMhOverfilling: integer("OldMH_Overfilling"),
    mhContamination: integer("MH_Contamination"),
    oldMhContamination: integer("OldMH_Contamination"),
    mhEquipmentFailure: integer("MH_EquipmentFailure"),
    oldMhEquipmentFailure: integer("OldMH_EquipmentFailure"),
    mhCoolingLoss: integer("MH_CoolingLoss"),
    oldMhCoolingLoss: integer("OldMH_CoolingLoss"),
    mhEarthquake: integer("MH_Earthquake"),
    oldMhEarthquake: integer("OldMH_Earthquake"),
    mhFloods: integer("MH_Floods"),
    oldMhFloods: integer("OldMH_Floods"),
    mhTornado: integer("MH_Tornado"),
    oldMhTornado: integer("OldMH_Tornado"),
    mhHurricanes: integer("MH_Hurricanes"),
    oldMhHurricanes: integer("OldMH_Hurricanes"),
    mhOtherType: text("MH_OtherType"),
    oldMhOtherType: text("OldMH_OtherType"),
    pcVents: integer("PC_Vents"),
    oldPcVents: integer("OldPC_Vents"),
    pcReliefValves: integer("PC_ReliefValves"),
    oldPcReliefValves: integer("OldPC_ReliefValves"),
    pcCheckValves: integer("PC_CheckValves"),
    oldPcCheckValves: integer("OldPC_CheckValves"),
    pcScrubbers: integer("PC_Scrubbers"),
    oldPcScrubbers: integer("OldPC_Scrubbers"),
    pcFlares: integer("PC_Flares"),
    oldPcFlares: integer("OldPC_Flares"),
    pcManualShutoffs: integer("PC_ManualShutoffs"),
    oldPcManualShutoffs: integer("OldPC_ManualShutoffs"),
    pcAutomaticShutoffs: integer("PC_AutomaticShutoffs"),
    oldPcAutomaticShutoffs: integer("OldPC_AutomaticShutoffs"),
    pcInterlocks: integer("PC_Interlocks"),
    oldPcInterlocks: integer("OldPC_Interlocks"),
    pcAlarms: integer("PC_Alarms"),
    oldPcAlarms: integer("OldPC_Alarms"),
    pcKeyedBypass: integer("PC_KeyedBypass"),
    oldPcKeyedBypass: integer("OldPC_KeyedBypass"),
    pcEmergencyAirSupply: integer("PC_EmergencyAirSupply"),
    oldPcEmergencyAirSupply: integer("OldPC_EmergencyAirSupply"),
    pcEmergencyPower: integer("PC_EmergencyPower"),
    oldPcEmergencyPower: integer("OldPC_EmergencyPower"),
    pcBackupPump: integer("PC_BackupPump"),
    oldPcBackupPump: integer("OldPC_BackupPump"),
    pcGroundingEquipment: integer("PC_GroundingEquipment"),
    oldPcGroundingEquipment: integer("OldPC_GroundingEquipment"),
    pcInhibitorAddition: integer("PC_InhibitorAddition"),
    oldPcInhibitorAddition: integer("OldPC_InhibitorAddition"),
    pcRuptureDisks: integer("PC_RuptureDisks"),
    oldPcRuptureDisks: integer("OldPC_RuptureDisks"),
    pcExcessFlowDevice: integer("PC_ExcessFlowDevice"),
    oldPcExcessFlowDevice: integer("OldPC_ExcessFlowDevice"),
    pcQuenchSystem: integer("PC_QuenchSystem"),
    oldPcQuenchSystem: integer("OldPC_QuenchSystem"),
    pcPurgeSystem: integer("PC_PurgeSystem"),
    oldPcPurgeSystem: integer("OldPC_PurgeSystem"),
    pcNone: integer("PC_None"),
    oldPcNone: integer("OldPC_None"),
    pcOtherType: text("PC_OtherType"),
    oldPcOtherType: text("OldPC_OtherType"),
    msSprinklerSystem: integer("MS_SprinklerSystem"),
    oldMsSprinklerSystem: integer("OldMS_SprinklerSystem"),
    msDikes: integer("MS_Dikes"),
    oldMsDikes: integer("OldMS_Dikes"),
    msFireWalls: integer("MS_FireWalls"),
    oldMsFireWalls: integer("OldMS_FireWalls"),
    msBlastWalls: integer("MS_BlastWalls"),
    oldMsBlastWalls: integer("OldMS_BlastWalls"),
    msDelugeSystem: integer("MS_DelugeSystem"),
    oldMsDelugeSystem: integer("OldMS_DelugeSystem"),
    msWaterCurtain: integer("MS_WaterCurtain"),
    oldMsWaterCurtain: integer("OldMS_WaterCurtain"),
    msEnclosure: integer("MS_Enclosure"),
    oldMsEnclosure: integer("OldMS_Enclosure"),
    msNeutralization: integer("MS_Neutralization"),
    oldMsNeutralization: integer("OldMS_Neutralization"),
    msNone: integer("MS_None"),
    oldMsNone: integer("OldMS_None"),
    msOtherType: text("MS_OtherType"),
    oldMsOtherType: text("OldMS_OtherType"),
    mdProcessAreaDetectors: integer("MD_ProcessAreaDetectors"),
    oldMdProcessAreaDetectors: integer("OldMD_ProcessAreaDetectors"),
    mdPerimeterMonitors: integer("MD_PerimeterMonitors"),
    oldMdPerimeterMonitors: integer("OldMD_PerimeterMonitors"),
    mdNone: integer("MD_None"),
    oldMdNone: integer("OldMD_None"),
    mdOtherType: text("MD_OtherType"),
    oldMdOtherType: text("OldMD_OtherType"),
    chChemicalReduction: integer("CH_ChemicalReduction"),
    oldChChemicalReduction: integer("OldCH_ChemicalReduction"),
    chChemicalIncrease: integer("CH_ChemicalIncrease"),
    oldChChemicalIncrease: integer("OldCH_ChemicalIncrease"),
    chChangeProcessParameters: integer("CH_ChangeProcessParameters"),
    oldChChangeProcessParameters: integer("OldCH_ChangeProcessParameters"),
    chInstallProcessControls: integer("CH_InstallProcessControls"),
    oldChInstallProcessControls: integer("OldCH_InstallProcessControls"),
    chInstallProcessDetection: integer("CH_InstallProcessDetection"),
    oldChInstallProcessDetection: integer("OldCH_InstallProcessDetection"),
    chInstallPerimeterMonitoring: integer("CH_InstallPerimeterMonitoring"),
    oldChInstallPerimeterMonitoring: integer(
      "OldCH_InstallPerimeterMonitoring"
    ),
    chInstallMitigationSystems: integer("CH_InstallMitigationSystems"),
    oldChInstallMitigationSystems: integer("OldCH_InstallMitigationSystems"),
    chNoneRequired: integer("CH_NoneRequired"),
    oldChNoneRequired: integer("OldCH_NoneRequired"),
    chNone: integer("CH_None"),
    oldChNone: integer("OldCH_None"),
    chOtherChanges: text("CH_OtherChanges"),
    oldChOtherChanges: text("OldCH_OtherChanges"),
    opProceduresReviewDate: numeric("OpProceduresReviewDate"),
    oldOpProceduresReviewDate: numeric("OldOpProceduresReviewDate"),
    trainingReviewDate: numeric("TrainingReviewDate"),
    oldTrainingReviewDate: numeric("OldTrainingReviewDate"),
    trClassroom: integer("TR_Classroom"),
    oldTrClassroom: integer("OldTR_Classroom"),
    trOnTheJob: integer("TR_OnTheJob"),
    oldTrOnTheJob: integer("OldTR_OnTheJob"),
    trOtherType: text("TR_OtherType"),
    oldTrOtherType: text("OldTR_OtherType"),
    ctWrittenTest: integer("CT_WrittenTest"),
    oldCtWrittenTest: integer("OldCT_WrittenTest"),
    ctOralTest: integer("CT_OralTest"),
    oldCtOralTest: integer("OldCT_OralTest"),
    ctDemonstration: integer("CT_Demonstration"),
    oldCtDemonstration: integer("OldCT_Demonstration"),
    ctObservation: integer("CT_Observation"),
    oldCtObservation: integer("OldCT_Observation"),
    ctOtherType: text("CT_OtherType"),
    oldCtOtherType: text("OldCT_OtherType"),
    maintenanceReviewDate: numeric("MaintenanceReviewDate"),
    oldMaintenanceReviewDate: numeric("OldMaintenanceReviewDate"),
    equipmentInspectionDate: numeric("EquipmentInspectionDate"),
    oldEquipmentInspectionDate: numeric("OldEquipmentInspectionDate"),
    equipmentTested: text("EquipmentTested"),
    oldEquipmentTested: text("OldEquipmentTested"),
    changeMgmtDate: numeric("ChangeMgmtDate"),
    oldChangeMgmtDate: numeric("OldChangeMgmtDate"),
    changeMgmtReviewDate: numeric("ChangeMgmtReviewDate"),
    oldChangeMgmtReviewDate: numeric("OldChangeMgmtReviewDate"),
    preStartupReviewDate: numeric("PreStartupReviewDate"),
    oldPreStartupReviewDate: numeric("OldPreStartupReviewDate"),
    complianceAuditDate: numeric("ComplianceAuditDate"),
    oldComplianceAuditDate: numeric("OldComplianceAuditDate"),
    auditCompletionDate: numeric("AuditCompletionDate"),
    oldAuditCompletionDate: numeric("OldAuditCompletionDate"),
    incidentInvestigationDate: numeric("IncidentInvestigationDate"),
    oldIncidentInvestigationDate: numeric("OldIncidentInvestigationDate"),
    investigationChangeDate: numeric("InvestigationChangeDate"),
    oldInvestigationChangeDate: numeric("OldInvestigationChangeDate"),
    participationPlansReviewDate: numeric("ParticipationPlansReviewDate"),
    oldParticipationPlansReviewDate: numeric("OldParticipationPlansReviewDate"),
    hotWorkPermitReviewDate: numeric("HotWorkPermitReviewDate"),
    oldHotWorkPermitReviewDate: numeric("OldHotWorkPermitReviewDate"),
    contractorSafetyReviewDate: numeric("ContractorSafetyReviewDate"),
    oldContractorSafetyReviewDate: numeric("OldContractorSafetyReviewDate"),
    contractorSafetyEvalDate: numeric("ContractorSafetyEvalDate"),
    oldContractorSafetyEvalDate: numeric("OldContractorSafetyEvalDate"),
  }
);

export const tlkpCountyFipsCodes = sqliteTable("tlkpCountyFIPSCodes", {
  stateCode: text("State_Code"),
  countyCode: text("County_Code"),
  countyName: text("County_Name"),
  stateCountyCode: text("StateCounty_Code"),
});

export const tlkpPhysicalStateCodes = sqliteTable("tlkpPhysicalStateCodes", {
  lookupCode: text("LookupCode"),
  description: text("Description"),
});
